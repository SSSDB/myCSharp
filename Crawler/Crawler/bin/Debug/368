<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="写在前面 最近，很多读者出去面试都在Java8上栽了跟头，事后自己分析，确实对Java8的新特性一知半解。然而，却在简历显眼的技能部分写着：熟练掌握Java8的各种新特性，能够迅速使用Java8开发高" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【Java8新特性】不了解Optional类，简历上别说你懂Java8！！ - 冰河团队 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/bluesky/bundle-bluesky.min.css?v=I3VZjYnH5M1uY3hsp6Xvwz3zVaK2wSRFNzIVcN9qVMk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/binghe001/custom.css?v=xb7lYj2J1ysiNILqcCn5g76IIu4=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/bluesky/bundle-bluesky-mobile.min.css?v=s2piIyFV3NYqZWTmizb6uafQjmZFRhUBr8YMAdV85mA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/binghe001/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/binghe001/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/binghe001/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 578171;
        var currentBlogApp = 'binghe001';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlueSky';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/binghe001/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/binghe001/">冰河团队</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/binghe001/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%86%B0%E6%B2%B3%E5%9B%A2%E9%98%9F">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/binghe001/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
49&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
53</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/binghe001/p/12995007.html">【Java8新特性】不了解Optional类，简历上别说你懂Java8！！</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="写在前面">写在前面</h2>
<blockquote>
<p>最近，很多读者出去面试都在Java8上栽了跟头，事后自己分析，确实对Java8的新特性一知半解。然而，却在简历显眼的技能部分写着：熟练掌握Java8的各种新特性，能够迅速使用Java8开发高并发应用！这不，又一名读者因为写了熟练掌握Java8的新特性而被面试官虐的体无完肤！我不是说不能写，可以这样写！但是，咱在写熟练掌握Java8新特性的时候，应该静下心来好好想想自己是否真的掌握了Java8。如果自己心中对是否掌握了Java8这个问题模棱两可的话，那确实要好好静下心来为自己充电了！一定要从模棱两可到彻底掌握Java8，那到时就不是面试官虐你了，而是你吊打面试官！！</p>
</blockquote>
<h2 id="什么是optional类？">什么是Optional类？</h2>
<p>Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</p>
<p><strong>Optional类常用方法：</strong></p>
<ul>
<li>Optional.of(T t) : 创建一个 Optional 实例。</li>
<li>Optional.empty() : 创建一个空的 Optional 实例。</li>
<li>Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例。</li>
<li>isPresent() : 判断是否包含值。</li>
<li>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t。</li>
<li>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值。</li>
<li>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()。</li>
<li>flatMap(Function mapper):与 map 类似，要求返回值必须是Optional。</li>
</ul>
<h2 id="optional类示例">Optional类示例</h2>
<h3 id="1创建optional类">1.创建Optional类</h3>
<p>（1）使用empty()方法创建一个空的Optional对象：</p>
<pre><code class="language-java">Optional&lt;String&gt; empty = Optional.empty();
</code></pre>
<p>（2）使用of()方法创建Optional对象：</p>
<pre><code class="language-java">String name = &quot;binghe&quot;;
Optional&lt;String&gt; opt = Optional.of(name);
assertEquals(&quot;Optional[binghe]&quot;, opt.toString());
</code></pre>
<p>传递给of()的值不可以为空，否则会抛出空指针异常。例如，下面的程序会抛出空指针异常。</p>
<pre><code class="language-java">String name = null;
Optional&lt;String&gt; opt = Optional.of(name);
</code></pre>
<p>如果我们需要传递一些空值，那我们可以使用下面的示例所示。</p>
<pre><code class="language-java">String name = null;
Optional&lt;String&gt; opt = Optional.ofNullable(name);
</code></pre>
<p>使用ofNullable()方法，则当传递进去一个空值时，不会抛出异常，而只是返回一个空的Optional对象，如同我们用Optional.empty()方法一样。</p>
<h3 id="2ispresent">2.isPresent</h3>
<p>我们可以使用这个isPresent()方法检查一个Optional对象中是否有值，只有值非空才返回true。</p>
<pre><code class="language-java">Optional&lt;String&gt; opt = Optional.of(&quot;binghe&quot;);
assertTrue(opt.isPresent());

opt = Optional.ofNullable(null);
assertFalse(opt.isPresent());
</code></pre>
<p>在Java8之前，我们一般使用如下方式来检查空值。</p>
<pre><code class="language-java">if(name != null){
    System.out.println(name.length);
}
</code></pre>
<p>在Java8中，我们就可以使用如下方式来检查空值了。</p>
<pre><code class="language-java">Optional&lt;String&gt; opt = Optional.of(&quot;binghe&quot;);
opt.ifPresent(name -&gt; System.out.println(name.length()));
</code></pre>
<h3 id="3orelse和orelseget">3.orElse和orElseGet</h3>
<p>（1）orElse</p>
<p>orElse()方法用来返回Optional对象中的默认值，它被传入一个“默认参数‘。如果对象中存在一个值，则返回它，否则返回传入的“默认参数”。</p>
<pre><code class="language-java">String nullName = null;
String name = Optional.ofNullable(nullName).orElse(&quot;binghe&quot;);
assertEquals(&quot;binghe&quot;, name);
</code></pre>
<p>（2）orElseGet</p>
<p>与orElse()方法类似，但是这个函数不接收一个“默认参数”，而是一个函数接口。</p>
<pre><code class="language-java">String nullName = null;
String name = Optional.ofNullable(nullName).orElseGet(() -&gt; &quot;binghe&quot;);
assertEquals(&quot;binghe&quot;, name);
</code></pre>
<p>（3）二者有什么区别？</p>
<p>要想理解二者的区别，首先让我们创建一个无参且返回定值的方法。</p>
<pre><code class="language-java">public String getDefaultName() {
    System.out.println(&quot;Getting Default Name&quot;);
    return &quot;binghe&quot;;
}
</code></pre>
<p>接下来，进行两个测试看看两个方法到底有什么区别。</p>
<pre><code class="language-java">String text;
System.out.println(&quot;Using orElseGet:&quot;);
String defaultText = Optional.ofNullable(text).orElseGet(this::getDefaultName);
assertEquals(&quot;binghe&quot;, defaultText);

System.out.println(&quot;Using orElse:&quot;);
defaultText = Optional.ofNullable(text).orElse(getDefaultName());
assertEquals(&quot;binghe&quot;, defaultText);
</code></pre>
<p>在这里示例中，我们的Optional对象中包含的都是一个空值，让我们看看程序执行结果:</p>
<pre><code class="language-java">Using orElseGet:
Getting default name...
Using orElse:
Getting default name...
</code></pre>
<p>两个Optional对象中都不存在value，因此执行结果相同。</p>
<p>那么，当Optional对象中存在数据会发生什么呢？我们一起来验证下。</p>
<pre><code class="language-java">String name = &quot;binghe001&quot;;

System.out.println(&quot;Using orElseGet:&quot;);
String defaultName = Optional.ofNullable(name).orElseGet(this::getDefaultName);
assertEquals(&quot;binghe001&quot;, defaultName);

System.out.println(&quot;Using orElse:&quot;);
defaultName = Optional.ofNullable(name).orElse(getDefaultName());
assertEquals(&quot;binghe001&quot;, defaultName);
</code></pre>
<p>运行结果如下所示。</p>
<pre><code class="language-java">Using orElseGet:
Using orElse:
Getting default name...
</code></pre>
<p>可以看到，当使用orElseGet()方法时，getDefaultName()方法并不执行，因为Optional中含有值，而使用orElse时则照常执行。所以可以看到，当值存在时，orElse相比于orElseGet，多创建了一个对象。如果创建对象时，存在网络交互，那系统资源的开销就比较大了，这是需要我们注意的一个地方。</p>
<h3 id="4orelsethrow">4.orElseThrow</h3>
<p>orElseThrow()方法当遇到一个不存在的值的时候，并不返回一个默认值，而是抛出异常。</p>
<pre><code class="language-java">String nullName = null;
String name = Optional.ofNullable(nullName).orElseThrow( IllegalArgumentException::new);
</code></pre>
<h3 id="5get">5.get</h3>
<p>get()方法表示是Optional对象中获取值。</p>
<pre><code class="language-java">Optional&lt;String&gt; opt = Optional.of(&quot;binghe&quot;);
String name = opt.get();
assertEquals(&quot;binghe&quot;, name);
</code></pre>
<p>使用get()方法也可以返回被包裹着的值。但是值必须存在。当值不存在时，会抛出一个NoSuchElementException异常。</p>
<pre><code class="language-java">Optional&lt;String&gt; opt = Optional.ofNullable(null);
String name = opt.get();
</code></pre>
<h3 id="6filter">6.filter</h3>
<p>接收一个函数式接口，当符合接口时，则返回一个Optional对象，否则返回一个空的Optional对象。</p>
<pre><code class="language-java">String name = &quot;binghe&quot;;
Optional&lt;String&gt; nameOptional = Optional.of(name);
boolean isBinghe = nameOptional.filter(n -&gt; &quot;binghe&quot;.equals(name)).isPresent();
assertTrue(isBinghe);
boolean isBinghe001 = nameOptional.filter(n -&gt; &quot;binghe001&quot;.equals(name)).isPresent();
assertFalse(isBinghe001);
</code></pre>
<p>使用filter()方法会过滤掉我们不需要的元素。</p>
<p>接下来，我们再来看一例示例，例如目前有一个Person类，如下所示。</p>
<pre><code class="language-java">public class Person{
    private int age;
    public Person(int age){
        this.age = age;
    }
    //省略get set方法
}
</code></pre>
<p>例如，我们需要过滤出年龄在25岁到35岁之前的人群，那在Java8之前我们需要创建一个如下的方法来检测每个人的年龄范围是否在25岁到35岁之前。</p>
<pre><code class="language-java">public boolean filterPerson(Peron person){
    boolean isInRange = false;
    if(person != null &amp;&amp; person.getAge() &gt;= 25 &amp;&amp; person.getAge() &lt;= 35){
        isInRange =  true;
    }
    return isInRange;
}
</code></pre>
<p>看上去就挺麻烦的，我们可以使用如下的方式进行测试。</p>
<pre><code class="language-java">assertTrue(filterPerson(new Peron(18)));
assertFalse(filterPerson(new Peron(29)));
assertFalse(filterPerson(new Peron(16)));
assertFalse(filterPerson(new Peron(34)));
assertFalse(filterPerson(null));
</code></pre>
<p>如果使用Optional，效果如何呢？</p>
<pre><code class="language-java">public boolean filterPersonByOptional(Peron person){
     return Optional.ofNullable(person)
       .map(Peron::getAge)
       .filter(p -&gt; p &gt;= 25)
       .filter(p -&gt; p &lt;= 35)
       .isPresent();
}
</code></pre>
<p>使用Optional看上去就清爽多了，这里，map()仅仅是将一个值转换为另一个值，并且这个操作并不会改变原来的值。</p>
<h3 id="7map">7.map</h3>
<p>如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()。</p>
<pre><code class="language-java">List&lt;String&gt; names = Arrays.asList(&quot;binghe001&quot;, &quot;binghe002&quot;, &quot;&quot;, &quot;binghe003&quot;, &quot;&quot;, &quot;binghe004&quot;);
Optional&lt;List&lt;String&gt;&gt; listOptional = Optional.of(names);

int size = listOptional
    .map(List::size)
    .orElse(0);
assertEquals(6, size);
</code></pre>
<p>在这个例子中，我们使用一个List集合封装了一些字符串，然后再把这个List使用Optional封装起来，对其map()，获取List集合的长度。map()返回的结果也被封装在一个Optional对象中，这里当值不存在的时候，我们会默认返回0。如下我们获取一个字符串的长度。</p>
<pre><code class="language-java">String name = &quot;binghe&quot;;
Optional&lt;String&gt; nameOptional = Optional.of(name);

int len = nameOptional
    .map(String::length())
    .orElse(0);
assertEquals(6, len);
</code></pre>
<p>我们也可以将map()方法与filter()方法结合使用，如下所示。</p>
<pre><code class="language-java">String password = &quot; password &quot;;
Optional&lt;String&gt; passOpt = Optional.of(password);
boolean correctPassword = passOpt.filter(
    pass -&gt; pass.equals(&quot;password&quot;)).isPresent();
assertFalse(correctPassword);

correctPassword = passOpt
    .map(String::trim)
    .filter(pass -&gt; pass.equals(&quot;password&quot;))
    .isPresent();
assertTrue(correctPassword);
</code></pre>
<p>上述代码的含义就是对密码进行验证，查看密码是否为指定的值。</p>
<h3 id="8flatmap">8.flatMap</h3>
<p>与 map 类似，要求返回值必须是Optional。</p>
<p>假设我们现在有一个Person类。</p>
<pre><code class="language-java">public class Person {
    private String name;
    private int age;
    private String password;
 
    public Optional&lt;String&gt; getName() {
        return Optional.ofNullable(name);
    }
 
    public Optional&lt;Integer&gt; getAge() {
        return Optional.ofNullable(age);
    }
 
    public Optional&lt;String&gt; getPassword() {
        return Optional.ofNullable(password);
    }
    // 忽略get set方法
}
</code></pre>
<p>接下来，我们可以将Person封装到Optional中，并进行测试，如下所示。</p>
<pre><code class="language-java">Person person = new Person(&quot;binghe&quot;, 18);
Optional&lt;Person&gt; personOptional = Optional.of(person);

Optional&lt;Optional&lt;String&gt;&gt; nameOptionalWrapper = personOptional.map(Person::getName);
Optional&lt;String&gt; nameOptional = nameOptionalWrapper.orElseThrow(IllegalArgumentException::new);
String name1 = nameOptional.orElse(&quot;&quot;);
assertEquals(&quot;binghe&quot;, name1);

String name = personOptional
    .flatMap(Person::getName)
    .orElse(&quot;&quot;);
assertEquals(&quot;binghe&quot;, name);
</code></pre>
<p>注意：方法getName返回的是一个Optional对象，如果使用map，我们还需要再调用一次get()方法，而使用flatMap()就不需要了。</p>
<h2 id="写在最后">写在最后</h2>
<blockquote>
<p>如果觉得文章对你有点帮助，请微信搜索并关注「 <strong>冰河技术</strong> 」微信公众号，跟冰河学习Java8新特性。</p>
</blockquote>
<p>最后，附上Java8新特性核心知识图，祝大家在学习Java8新特性时少走弯路。<br>
<img src="https://img-blog.csdnimg.cn/20200530210831508.jpg" alt="在这里插入图片描述"></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-30 21:12</span>&nbsp;
<a href="https://www.cnblogs.com/binghe001/">冰河团队</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12995007" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12995007);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 578171, cb_blogApp = 'binghe001', cb_blogUserGuid = '05b2a200-765e-4a35-ba19-08d6fd3e81b2';
    var cb_entryId = 12995007, cb_entryCreatedDate = '2020-05-30 21:12', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 冰河团队
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
