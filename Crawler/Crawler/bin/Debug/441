<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="题目 With highways available, driving a car from Hangzhou to any other city is easy. But since the tan" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>PAT 1033 To Fill or Not to Fill (25分) 贪心思想 - 无代码，非程序 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=UeHyLv1TT2WTz4TwfUOiMoKNmtFvLUjUnIhFE2UmZ7I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/codervivi/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/codervivi/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/codervivi/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 593699;
        var currentBlogApp = 'codervivi';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/codervivi/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/codervivi/">Vivi's Blog</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/codervivi/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%97%A0%E4%BB%A3%E7%A0%81%EF%BC%8C%E9%9D%9E%E7%A8%8B%E5%BA%8F">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/codervivi/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
36&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/codervivi/p/12993634.html">PAT 1033 To Fill or Not to Fill (25分) 贪心思想</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h3 id="题目">题目</h3>
<p>With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go.</p>
<p><strong>Input Specification:</strong><br>
Each input file contains one test case. For each case, the first line contains 4 positive numbers: C​max​​  (≤ 100), the maximum capacity of the tank; D (≤30000), the distance between Hangzhou and the destination city; D​avg​​  (≤20), the average distance per unit gas that the car can run; and N (≤ 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: P​i​​ , the unit gas price, and D​i​​  (≤D), the distance between this station and Hangzhou, for i=1,⋯,N. All the numbers in a line are separated by a space.</p>
<p><strong>Output Specification:</strong><br>
For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print The maximum travel distance = X where X is the maximum possible distance the car can run, accurate up to 2 decimal places.</p>
<p><strong>Sample Input 1:</strong><br>
50 1300 12 8<br>
6.00 1250<br>
7.00 600<br>
7.00 150<br>
7.10 0<br>
7.20 200<br>
7.50 400<br>
7.30 1000<br>
6.85 300<br>
<strong>Sample Output 1:</strong><br>
749.17<br>
<strong>Sample Input 2:</strong><br>
50 1300 12 2<br>
7.10 0<br>
7.00 600<br>
<strong>Sample Output 2:</strong><br>
The maximum travel distance = 1200.00</p>
<h3 id="题目解读">题目解读</h3>
<p>题目大意：汽车从杭州出发可以通过高速公路去任何城市，但是油箱的容量是有限的，路上有很多加油站，每个加油站的价格不同，为汽车设计一个从杭州到终点的最便宜的加油策略。</p>
<p>输入：第一行：<code>Cmax</code>表示油箱最大容量，<code>D</code>表示杭州到目的地的距离，<code>Davg</code>表示平均每单位的汽油可以让汽车行驶的距离，<code>N</code>表示途中加油站的数量；接下来 <code>N</code> 行：给出给个加油站的单位油价<code>Pi</code>和杭州（起点）到这个站点的距离<code>Di</code>。</p>
<p>输出：求汽车从杭州到终点的最少花费（<strong>精确到两位小数</strong>）。如果不能够到达，就输出汽车能够行驶的最大距离（<strong>精确到两位小数</strong>）。</p>
<h3 id="思路分析">思路分析</h3>
<p>核心思想：<strong>贪心算法</strong>（每次寻找<strong>局部最优</strong>，在最便宜的加油站加最多的油）。</p>
<p>前期准备：</p>
<ul>
<li>最终输出无论是距离还是价格都要求精确到两位小数，虽然从给出的输入数据来看，距离、邮箱容量等好像都是整数，但为了操作方便，避免运算过程精度丢失，我们全都用<code>double</code>保存。（再说了，它给出的数据说不定就是坑你的呢？）</li>
<li>设置<code>结构体数组</code>保存每个加油站的单价和到杭州的距离。</li>
<li>按照到杭州的距离对结构体数组<strong>排序</strong>，因为输入是无序的。</li>
<li>排序完<strong>判断第1个结构体到杭州的距离是否为0</strong>，也就是说最近的加油站是不是在起点。因为题目说了假定刚开始邮箱没有油，那么如果起点处没有加油站，就比欸想开车了，直接输出并返回吧。</li>
</ul>
<p>贪心<strong>核心</strong>：怎么实现每次都做出局部最优的选择？</p>
<p>对于任意一个站点：如果我们在这个站点加满油，那么最多就可以跑<code>cmax*davg</code>的距离，我们对<strong>这个距离段中遇到的加油站</strong>情况进行分析：</p>
<ul>
<li>按顺序遍历<code>【当前位置，当前位置+cmax*davg】</code>中的所有加油站，如果某个加油站的收费<strong>低于</strong>当前站点，那么我就在当前站点加油，跑到那个站点去，加多少呢？就加能<strong>恰好让我到达那个加油站</strong>的油。这样我去那个站点加油就能更便宜。</li>
<li>如果当前站点后面有不止一个站点更便宜，怎么选择？比如我现在在<code>A</code>，价格是<code>10</code>，后面是 <code>B</code> 价格<code>9</code>， 后面是<code>C</code> 价格<code>8</code>，  我<strong>先找到的是B，那我就退出本次循环，刚好加油跑到B去</strong>，在<code>B</code>处重新继续分析。为啥不直接加油去<code>C</code>，如果从当前位置直接加油去<code>C</code>，那么<code>BC之间</code>的花费单价是当前加油站的价格也就是<code>10</code>，但我如果先去了<code>B</code>，那么<code>从B到C</code>的油价就是<code>B</code>处的价格<code>9</code>，显然更便宜。这样才满足局部最优。</li>
<li>如果当前位置后面没有更便宜的加油站呢？
<ul>
<li>如果<strong>我在当前位置最多能达到的最远距离超过了终点</strong>，那么我直接加油跑到终点，因为后面的站点只会更贵。</li>
<li>如果我不能直接到终点，那么我肯定是需要加油的，那我就找尽可能地找比较便宜的那个加油站，<strong>在当前加油站加满油</strong>之后过去。既然没有比当前更低价格的了，就让油箱加到最大值，这样能保证利益最大化，保证最大的距离使用的是便宜的油。</li>
</ul>
</li>
<li>如果当前位置不能直接到达终点，并且后面没有加油站了呢？那么肯定不能到达中终点了，只能到达<code>当前位置+cmax*davg</code>，也就是说在当前位置加满，能跑多远是多远。</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>当前位置能到达的范围中如果<strong>存在</strong>更便宜的加油站，就加合适的油刚好到达那个加油站。</li>
<li>如果<strong>不存在</strong>更便宜的，但是当前位置<strong>能直接到达终点</strong>，那就加合适的油到达终点。</li>
<li><strong>不存在</strong>更便宜的，并且<strong>不能直接到终点</strong>，找到可达的加油站的相对而言最便宜那个，在<strong>当前位置加满油</strong>，然后去那个站点。</li>
<li>当前位置<strong>不能到终点</strong>，并且后面<strong>没有加油站</strong>了，输出能到达的最大距离。</li>
</ul>
<h3 id="代码">代码</h3>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

struct Station {
    // 每单位汽油价格
    double price;
    // 从起点到这里的距离
    double dis;
}stat[500];

// 对加油站 离起点 从近到远 排序
bool cmp(Station a, Station b) {
    return a.dis &lt; b.dis;
}

int main() {
    // cmax油箱容量 d 距离 davg 每单位油能跑多远 n个加油站
    double cmax, d, davg;
    int n;
    cin &gt;&gt; cmax &gt;&gt; d &gt;&gt; davg &gt;&gt; n;
    // 每个加油站的 价格 位置
    for (int i = 0; i &lt; n; ++i) 
        cin &gt;&gt; stat[i].price &gt;&gt; stat[i].dis;
    // 根据离起点的距离排序
    sort(stat, stat + n, cmp);
    // 第一个加油站不在起点，无法起步
    if(stat[0].dis != 0) {
        printf(&quot;The maximum travel distance = 0.00&quot;);
        return 0;
    } 
    // nowpos当前在哪个加油站，
    int nowpos = 0;
    // nowgas 当前剩余多少油，total_price 总花费
    double nowgas = 0.00, total_price = 0.00;
    // 油箱加满一次油，可以跑多远
    double each_max_run_dis = cmax * davg;
    // 是否到达终点
    bool arrived = false;
    while (!arrived) {
        // 遍历 【从当前加油站到最远能跑到的位置】 之间的 全部加油站
        bool exist_stat  = false; // 当前位置后面是否存在可达加油站
        bool exist_cheaper_stat = false; // 是否存在比当前位置更便宜的加油站
        // 不存在比当前便宜的，就找到其中价格最低的
        int min_pos = -1; double min_price = 9999.99;
        for (int i = nowpos + 1; i &lt; n; ++i) {
            // 当前位置到不了这个加油站，退出循环
            if (stat[i].dis - stat[nowpos].dis &gt; each_max_run_dis) {
                // 最多还能走 nowgas * davg
                break;
            }
            exist_stat = true; // 存在可达加油站
            // 如果有比当前加油站价格更低的加油站
            // 算一下恰好跑到那个加油站需要多少油，
            // 加油跑到那个加油站
            if (stat[i].price &lt; stat[nowpos].price) {
                // 设置标志
                exist_cheaper_stat = true;
                double needgas = (stat[i].dis - stat[nowpos].dis) / davg - nowgas;
                // 加这么多油，刚好跑到那个加油站，算一下花费
                total_price += stat[nowpos].price * needgas;
                // 到达那个位置后剩余油量归0
                nowgas = 0;
                // 改变位置
                nowpos = i;
                // 不再遍历后面的加油站
                // 比如我现在 在A，价格是10，后面是 B 价格9， 后面是C 价格8
                // 我先找到的是B，那我就刚好加油跑到B去，在B处重新考虑
                // 为啥不直接加油去C，如果从当前位置直接加油去C，那么BC之间的花费单价是当前加油站的价格也就是10
                // 但我如果先去了B，那么从B到C的油价就是B处的价格9，显然更便宜
                // 这样才满足局部最优
                break;
            }
            // 如果说我能从当前位置跑1000米，但是在此之间的加油站的价格没有一个比我现在的价格低
            // 那我就尽量找最便宜的那个，然后在当前位置加满油，跑到相对而言最便宜的那个加油站去加油
            // 这样才满足局部最优（在最便宜的位置加更多的油跑最多的距离）
            // 这个if不会和上面的if同时执行（上面执行完就break了），所以不用加else
            if (stat[i].price &lt; min_price) {
                min_pos = i;
                min_price = stat[i].price;
            }
        }
        // 不存在比当前便宜的,但是当前位置最远能达到终点
        if (!exist_cheaper_stat &amp;&amp; (d - stat[nowpos].dis &lt;= each_max_run_dis)) {
            double needgas = (d - stat[nowpos].dis) / davg - nowgas;
            // 加这么多油，刚好跑到终点，算一下花费
            total_price += stat[nowpos].price * needgas;
            // 到达终点
            arrived = true;
            break;
        }
        // 不存在比当前便宜的,但是找到了其他加油站中相对最便宜那个
        if (!exist_cheaper_stat &amp;&amp; exist_stat) {
            // 后面有加油站，但是都比当前位置的加油站贵
            // 那我就尽量找最便宜的那个，然后在当前位置加满油，跑到相对而言最便宜的那个加油站去加油
            // 这样才满足局部最优（在最便宜的位置加更多的油跑最多的距离）
            double needgas = cmax - nowgas;
            // 在当前位置加满油，算一下花费
            total_price += stat[nowpos].price * needgas;
            // 到达那个位置后的剩余油量
            nowgas = cmax - (stat[min_pos].dis - stat[nowpos].dis) / davg;
            // 改变位置
            nowpos = min_pos;
        // 当前位置无法抵达下一个加油站
        } else if (!exist_stat){
            // 最多还能走 cmax * davg
            printf(&quot;The maximum travel distance = %.2f&quot;, stat[nowpos].dis + each_max_run_dis);
            return 0;
        }
    }
    // while正常结束，说明到达终点
    printf(&quot;%.2f&quot;, total_price);
    return 0;
}
</code></pre>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-30 16:56</span>&nbsp;
<a href="https://www.cnblogs.com/codervivi/">无代码，非程序</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12993634" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12993634);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 593699, cb_blogApp = 'codervivi', cb_blogUserGuid = '963baa0f-719c-463b-94b7-08d7d7b52bb0';
    var cb_entryId = 12993634, cb_entryCreatedDate = '2020-05-30 16:56', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 无代码，非程序
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
