<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>sinkinben - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=OL4qeo1LNGlN1rKIhv5UctANvt0M6Nx6kLzr_ffx3Xk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/sinkinben/custom.css?v=pJzkKOtejOIGnmChF6yaDTAGRus=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/sinkinben/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/sinkinben/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/sinkinben/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 503262;
        var currentBlogApp = 'sinkinben';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <script>loadPageBeginHtml();</script>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/sinkinben/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/sinkinben/">sinkinben</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>

</li>
<li>


</li>
<li>
</li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
50&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
6</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/05/30.html">2020年5月30日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12989657.html">
    [leetcode] 并查集（Ⅱ）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：最长连续序列 题目[128]：&amp;#128279;链接。 解题思路 节点本身的值作为节点的标号，两节点相邻，即允许合并(x, y)的条件为x == y+1 。 因为数组中可能会出现值为 -1 的节点，因此不能把 root[x] == -1 作为根节点的特征，所以采取 root[x] == x 作为判断是否为根节点的            <a href="https://www.cnblogs.com/sinkinben/p/12989657.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-30 20:53
sinkinben
<span class="post-view-count">阅读(43)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12989657" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/05/28.html">2020年5月28日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12979717.html">
    勇者斗恶龙 (Dragon Quest)
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：写这篇文章的缘由是今日偶然看了一部世纪情怀动画电影——《勇者斗恶龙》。 勇者斗恶龙，这个名字很「中二」，但我偏偏很喜欢 &amp;#128516;。熟悉这个 IP 的 90 后应该都知道是一款 RPG 游戏，在盛行 GBC/GBA/NDS 掌机的年代（对我来说，大概是2008 - 2011年这个时间段），相信这款游戏不少            <a href="https://www.cnblogs.com/sinkinben/p/12979717.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-28 12:00
sinkinben
<span class="post-view-count">阅读(26)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12979717" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/04/27.html">2020年4月27日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12789613.html">
    [leetcode] 并查集（Ⅰ）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：预备知识 并查集 (Union Set) 一种常见的应用是计算一个图中连通分量的个数。比如： 上图的连通分量的个数为 2 。 并查集的主要思想是在每个连通分量的集合中，选取一个代表，作为这个连通分量的根。根的选取是任意的，因为连通分量集合中每个元素都是等价的。我们只需关心根的个数（也是连通分量的个数            <a href="https://www.cnblogs.com/sinkinben/p/12789613.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-27 20:12
sinkinben
<span class="post-view-count">阅读(200)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12789613" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/04/09.html">2020年4月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12668994.html">
    [leetcode] 树（Ⅲ）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：All questions are simple level. &quot;Minimum Distance Between BST Nodes&quot; Question[783]: Given a Binary Search Tree (BST) with the root node root, return t            <a href="https://www.cnblogs.com/sinkinben/p/12668994.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-09 19:19
sinkinben
<span class="post-view-count">阅读(37)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12668994" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/04/08.html">2020年4月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12662958.html">
    树的遍历
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：It&#39;s just a personal note. Recursion traversal is trivial. All the traversal methods are implemented by iteration. &quot;Here is the source code.&quot; Binary T            <a href="https://www.cnblogs.com/sinkinben/p/12662958.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-08 21:31
sinkinben
<span class="post-view-count">阅读(31)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12662958" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/04/07.html">2020年4月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12657084.html">
    [leetcode] 树（Ⅱ）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：All questions are simple level. &quot;Construct String from Binary Tree&quot; Question[606]：You need to construct a string consists of parenthesis and integers             <a href="https://www.cnblogs.com/sinkinben/p/12657084.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-07 23:46
sinkinben
<span class="post-view-count">阅读(23)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12657084" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/04/05.html">2020年4月5日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12638701.html">
    [leetcode] 树（Ⅰ）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：均为 Simple 难度的水题。 &quot;二叉树的中序遍历&quot; 题目[94]：给定一个二叉树，返回它的 中序 遍历。 解题思路：Too simple. &quot;相同的树&quot; 题目[100]：给定两个二叉树，编写一个函数来检验它们是否相同。如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。 示例 解题            <a href="https://www.cnblogs.com/sinkinben/p/12638701.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-05 19:43
sinkinben
<span class="post-view-count">阅读(53)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12638701" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/04/02.html">2020年4月2日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12615183.html">
    二叉树图形化显示
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在刷 OJ 二叉树题目的时候，文字描述的输入都是 这种形式，但输入参数却是 ，很不直观，一旦节点数目很多，很难想象输入的二叉树是什么样子的。leetcode 上提供了一个很好的二叉树图形显示，现在自己动手实现一遍，也方便在其他地方使用。 第零步：前言 用 C++ 实现。假定输入格式是 这种形式的 字            <a href="https://www.cnblogs.com/sinkinben/p/12615183.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-02 09:21
sinkinben
<span class="post-view-count">阅读(44)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12615183" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/03/08.html">2020年3月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12443806.html">
    字符画
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：今日依旧无事，不想搞毕设。 无聊的人想法多，今日就想到把一只 Super Mario 在终端中输出。 具体做法十分「老土」，就是玩字符画那一套，但我这次想把这个字符串输出成彩色的。 准备工作 第一步当然是把图片转换为 24 位的位图，即 格式的图片，使用 Windows 自带的画图工具即可。 Asi            <a href="https://www.cnblogs.com/sinkinben/p/12443806.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-08 17:51
sinkinben
<span class="post-view-count">阅读(193)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12443806" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/sinkinben/archive/2020/03/05.html">2020年3月5日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12422931.html">
    不动点迭代算法
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：今天有个小朋友向我提出了一个「了不起」的问题。 一个有趣的现象 打开一个没有 Bug 的计算器，任意输入一个数值 $x$，然后找到函数 $sin(x)$ 或者 $cos(x)$ ，连续点击这个函数若干次，你会发现一个有趣的现象：无论初始的 $x$ 为多少，最后的值总是接近某一个数值（这些数值在某个精            <a href="https://www.cnblogs.com/sinkinben/p/12422931.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-05 21:43
sinkinben
<span class="post-view-count">阅读(166)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12422931" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/sinkinben/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			


<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 sinkinben
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!-- 生成博客目录的JS代码，两级目录 -->
<script type="text/javascript">
  /*  
      这段代码按H2、H3格式生成两级菜单
      写博客按H2、H3格式写，不然生成不了
      Markdown写作按##、###两级目录写
      当然你也可以改写代码成三级菜单
  */
  var BlogDirectory = {
    /* 获取元素位置，距浏览器左边界的距离（left）和距浏览器上边界的距离（top）*/
    getElementPosition: function (ele) {
      var topPosition = 0;
      var leftPosition = 0;
      while (ele) {
        topPosition += ele.offsetTop;
        leftPosition += ele.offsetLeft;
        ele = ele.offsetParent;
      }
      return { top: topPosition, left: leftPosition };
    },
    /*获取滚动条当前位置 */
    getScrollBarPosition: function () {
      var scrollBarPosition = document.body.scrollTop || document.documentElement.scrollTop;
      return scrollBarPosition;
    },
    /* 移动滚动条，finalPos 为目的位置，internal 为移动速度 */
    moveScrollBar: function (finalpos, interval) {
      //若不支持此方法，则退出
      if (!window.scrollTo) {
        return false;
      }

      //窗体滚动时，禁用鼠标滚轮
      window.onmousewheel = function () {
        return false;
      };

      //清除计时
      if (document.body.movement) {
        clearTimeout(document.body.movement);
      }

      //获取滚动条当前位置
      var currentpos = BlogDirectory.getScrollBarPosition();

      var dist = 0;
      //到达预定位置，则解禁鼠标滚轮，并退出
      if (currentpos == finalpos) {
        window.onmousewheel = function () {
          return true;
        }
        return true;
      }
      //未到达，则计算下一步所要移动的距离
      if (currentpos < finalpos) {
        dist = Math.ceil((finalpos - currentpos) / 10);
        currentpos += dist;
      }
      if (currentpos > finalpos) {
        dist = Math.ceil((currentpos - finalpos) / 10);
        currentpos -= dist;
      }

      var scrTop = BlogDirectory.getScrollBarPosition();//获取滚动条当前位置
      window.scrollTo(0, currentpos);//移动窗口
      if (BlogDirectory.getScrollBarPosition() == scrTop)//若已到底部，则解禁鼠标滚轮，并退出
      {
        window.onmousewheel = function () {
          return true;
        }
        return true;
      }

      //进行下一步移动
      var repeat = "BlogDirectory.moveScrollBar(" + finalpos + "," + interval + ")";
      document.body.movement = setTimeout(repeat, interval);
    },

    htmlDecode: function (text) {
      var temp = document.createElement("div");
      temp.innerHTML = text;
      var output = temp.innerText || temp.textContent;
      temp = null;
      return output;
    },

    /*
    创建博客目录，id表示包含博文正文的 div 容器的 id，
    mt 和 st 分别表示主标题和次级标题的标签名称（如 H2、H3，大写或小写都可以！），
    interval 表示移动的速度
    */
    createBlogDirectory: function (id, mt, st, interval) {
      //获取博文正文div容器
      var elem = document.getElementById(id);
      if (!elem) return false;
      //获取div中所有元素结点
      var nodes = elem.getElementsByTagName("*");
      //创建博客目录的div容器
      var divSideBar = document.createElement('DIV');
      divSideBar.className = 'uprightsideBar';
      divSideBar.setAttribute('id', 'uprightsideBar');

      var divSideBarTab = document.createElement('DIV');
      divSideBarTab.setAttribute('id', 'sideBarTab');

      var p = document.createElement('p');
      divSideBarTab.appendChild(p);
      var txt = document.createTextNode('📚目录');
      p.setAttribute('id', 'catalogHeadTitle');
      p.appendChild(txt);

      var divSideBarContents = document.createElement('DIV');
      divSideBarContents.style.display = 'none';
      divSideBarContents.setAttribute('id', 'sideBarContents');

      divSideBar.appendChild(divSideBarTab);
      divSideBar.appendChild(divSideBarContents);

      //创建自定义列表
      var dlist = document.createElement("dl");
      divSideBarContents.appendChild(dlist);
      var num = 0;//统计找到的mt和st
      mt = mt.toUpperCase();//转化成大写
      st = st.toUpperCase();//转化成大写
      //遍历所有元素结点
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].nodeName == mt || nodes[i].nodeName == st) {
          //获取标题文本
          var nodetext = nodes[i].innerHTML.replace(/<\/?[^>]+>/g, "");//innerHTML里面的内容可能有HTML标签，所以用正则表达式去除HTML的标签
          // nodetext = nodetext.replace(/ /ig, "");//替换掉所有的空格
          nodetext = BlogDirectory.htmlDecode(nodetext);
          //插入锚
          nodes[i].setAttribute("id", "blogTitle" + num);
          var item;
          switch (nodes[i].nodeName) {
            case mt:    //若为主标题
              item = document.createElement("dt");
              var itemtext = document.createTextNode(nodetext);
              break;
            case st:    //若为子标题
              item = document.createElement("dd");
              var itemtext = document.createTextNode('- ' + nodetext);
              break;
          }

          //创建锚链接
          item.appendChild(itemtext);
          item.setAttribute("name", num);
          //添加鼠标点击触发函数
          item.onclick = function () {
            var pos = BlogDirectory.getElementPosition(document.getElementById("blogTitle" + this.getAttribute("name")));
            if (!BlogDirectory.moveScrollBar(pos.top, interval)) return false;
          };
          //将自定义表项加入自定义列表中
          dlist.appendChild(item);
          num++;
        }
      }

      if (num == 0) return false;
      // 如果是移动端，通过点击的方式来显示或隐藏目录
      // 如果是PC端，通过鼠标聚焦的方式来显示或隐藏
      if (isMobile()) {
        divSideBar.onclick = function () {
          var status = divSideBarContents.style.display;
          if (status == 'block') {
            document.getElementById('catalogHeadTitle').innerText = '📚目录';
            divSideBarTab.style.borderRadius = '6px';
            divSideBarContents.style.display = 'none';
          } else if (status == 'none') {
            document.getElementById('catalogHeadTitle').innerText = '❎关闭';
            divSideBarTab.style.borderRadius = '6px 0px 0px 6px';
            divSideBarContents.style.display = 'block';
          }
        }
      } else {
        /* 鼠标进入时的事件处理 */
        divSideBarTab.onmouseenter = function () {
          divSideBarContents.style.display = 'block';
        }
        /* 鼠标离开时的事件处理 */
        divSideBar.onmouseleave = function () {
          divSideBarContents.style.display = 'none';
        }
      }
      document.body.appendChild(divSideBar);
    }

  };

  // 判断浏览器函数
  function isMobile() {
    if (window.navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)) {
      return true; // 移动端
    } else {
      return false; // PC端
    }
  }

  window.onload = function () {
    /* 页面加载完成之后生成博客目录 */
    BlogDirectory.createBlogDirectory("cnblogs_post_body", "h2", "h3", 20);
  }
</script>
    </div>
</body>
</html>
