<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="原文地址：http://www.cnblogs.com/goloving/p/7868865.html JS 的字符串相对其他语言来说功能总是有限的，事实上，ES5中一直缺乏许多特性，如多行字符串、字" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>ES6-10笔记(字符串模板||模板字面量的拓展) - 北鼠 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip.min.css?v=1CubIA3L29CO3-6VLJIOrrj2uGfyKeX_-xaumWzHk7o" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/xingchenhuanqi/custom.css?v=A6OKGCJHMncnV/EJ6ft8aFtURxA=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/darkgreentrip/bundle-darkgreentrip-mobile.min.css?v=0pGk3D9Ik_jI4q1TALBT2ybOjIePHS_80_0J4DDOQiY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/xingchenhuanqi/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/xingchenhuanqi/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/xingchenhuanqi/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 338005;
        var currentBlogApp = 'xingchenhuanqi';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'darkgreentrip';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <a href="https://github.com">  
<img style="position: absolute; top: 0; right: 0; border: 0" src="https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png">
</a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/xingchenhuanqi/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/xingchenhuanqi/">北鼠</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/xingchenhuanqi/">
首页</a>
</li>
<li>


</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%8C%97%E9%BC%A0">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
5&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/xingchenhuanqi/p/12995579.html">ES6-10笔记(字符串模板||模板字面量的拓展)</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>原文地址：<a href="http://www.cnblogs.com/goloving/p/7868865.html">http://www.cnblogs.com/goloving/p/7868865.html</a></p>
<p>JS 的字符串相对其他语言来说功能总是有限的，事实上，ES5中一直缺乏许多特性，如多行字符串、字符串格式化、HTML转义等。ES6通过模板字面量的方式进行了填补，模板字面量试着跳出JS已有的字符串体系，通过一些全新的方法来解决类似的问题。</p>
<h5 id="基本用法">基本用法</h5>
<p>模板字面量是增强版的字符串，它用反引号（`）标识</p>
<h5 id="多行字符串">多行字符串</h5>
<p>​        自javascript诞生起，开发者们就一直在寻找一种能创建多行字符串的方法。如果使用双引号或单引号，字符串一定要在同一行才行</p>
<p>1、反斜杠<br>
　　由于javascript长期以来一直存在一个语法bug，在换行之前的反斜线（ \ ）可以承接下一行的代码，于是可以利用这个bug来创建多行字符串，但是字符串打印输出时不会有换行，因为反斜线被视为延续符号而不是新行的符号。为了在输出中显示换行，需要手动加入换行符</p>
<pre><code>var message = &quot;Multiline
string&quot;;
console.log(message); 
// 报错：Uncaught SyntaxError: Invalid or unexpected token
</code></pre>
<pre><code>var message = &quot;Multiline \
string&quot;;
console.log(message); 
// &quot;Multiline string&quot;
</code></pre>
<pre><code>var message = &quot;Multiline \n\
string&quot;;
// &quot;Multiline 
// string&quot;
console.log(message); 
</code></pre>
<p>​		在所有主流的 JS 引擎中，此代码都会输出两行，但是该行为被认定为一个 bug ，并且许多开发者都建议应避免这么做。在ES6之前，通常都依靠数组或字符串的拼接来创建多行字符串。</p>
<pre><code>var message = [&quot;Multiline &quot;,&quot;string&quot;].join(&quot;\n&quot;);
let message = &quot;Multiline \n&quot; +&quot;string&quot;;
</code></pre>
<p>​		JS一直以来都不支持多行字符串，开发者的种种解决方法都不够完美。</p>
<p>2、反引号</p>
<p>​		ES6 的模板字面量使多行字符串更易创建，因为它不需要特殊的语法，只需在想要的位置直接换行即可，此处的换行会同步出现在结果中。</p>
<pre><code>let bb = `Multiline
string`;
// &quot;Multiline
// string&quot;
console.log(bb); 
console.log(bb.length); // 16
</code></pre>
<p>​	在反引号之内的所有空白符都是字符串的一部分，因此需要特别留意缩进。</p>
<p>​	<strong>模板字面量里的所有空白符都被视为字符串自身的一部分</strong>。</p>
<p>​	当然，也可以在模板字面量中使用 \n 来指示换行的插入位置</p>
<pre><code>let aaa=`aab\ndd`;
console.log(aaa,aaa.length)
//aab
//dd
//6
</code></pre>
<h5 id="变量占位符">变量占位符</h5>
<p>​		模板字面量看上去仅仅是普通JS字符串的升级版，但二者之间真正的区别在于模板字面量的变量占位符。变量占位符允许将任何有效的JS表达式嵌入到模板字面量中，并将其结果输出为字符串的一部分。</p>
<p>​		<strong>变量占位符由起始的 ${ 与结束的 } 来界定，之间允许放入任意的 JS 表达式</strong>。最简单的变量占位符允许将本地变量直接嵌入到结果字符串中。</p>
<pre><code>let name = &quot;Nicholas&quot;,
message = `Hello, ${name}.`;
console.log(message); // &quot;Hello, Nicholas.&quot;
</code></pre>
<p>​		占位符 ${name} 会访问本地变量 name ，并将其值插入到 message 字符串中。 message变量会立即保留该占位符的结果</p>
<p>　　既然占位符是JS表达式，那么可替换的就不仅仅是简单的变量名。可以轻易嵌入运算符、函数调用等</p>
<pre><code>let count = 10,
price = 0.25,
message = `${count} items cost $${(count * price).toFixed(2)}.`;
console.log(message); // &quot;10 items cost $2.50.&quot;
</code></pre>
<pre><code>function fn() {
  return &quot;Hello World&quot;;
}

`foo ${fn()} bar`
// foo Hello World bar
</code></pre>
<p>​		模板字面量本身也是 JS 表达式，因此可以<strong>将模板字面量嵌入到另一个模板字面量内部</strong></p>
<pre><code>let name = &quot;Nicholas&quot;,
    message = `Hello, ${
        `my name is ${ name }`
    }.`;
console.log(message); // &quot;Hello, my name is Nicholas.&quot;
</code></pre>
<h5 id="标签模板">标签模板</h5>
<p>​		模板字面量真正的威力来自于标签模板，<strong>每个模板标签都可以执行模板字面量上的转换并返回最终的字符串值。标签指的是在模板字面量第一个反引号'`'前方标注的字符串</strong></p>
<pre><code>let message = tag`Hello world`;
//在这个示例中， tag 就是应用到 `Hello world` 模板字面量上的模板标签
</code></pre>
<p>1、定义标签</p>
<p>​		标签可以是一个函数，调用时传入加工过的模板字面量各部分数据，但必须结合每个部分来创建结果。第一个参数是一个数组，包含Javascript解释过后的字面量字符串，它之后的所有参数都是每一个占位符的解释值</p>
<p>　　标签函数通常使用不定参数特性来定义占位符，从而简化数据处理的过程</p>
<pre><code>function tag(literals, ...substitutions) {
  // 返回一个字符串
}
</code></pre>
<p>​		为了进一步理解传递给tag函数的参数，查看以下代码</p>
<pre><code>let count = 10,
price = 0.25,
message = passthru`${count} items cost $${(count * price).toFixed(2)}.`;
</code></pre>
<p>​		如果有一个名为passthru()的函数，那么作为一个模板字面量标签，它会接受3个参数：</p>
<p>首先是一个literals数组，包含以下元素：</p>
<p>　　1、第一个占位符前的空字符串(&quot;&quot;)</p>
<p>　　2、第一、二个占位符之间的字符串(&quot; items cost $&quot;)</p>
<p>　　3、第二个占位符后的字符串(&quot;.&quot;)</p>
<p>下一个参数是变量count的解释值，传参为10，它也成为了substitutions数组里的第一个元素</p>
<p>最后一个参数是(count*price).toFixed(2)的解释值，传参为2.50，它是substitutions数组里的第二个元素</p>
<p>　　注意：literals里的第一个元素是一个空字符串，这确保了literals[0]总是字符串的始端，就像literals[literals.length-1]总是字符串的结尾一样。substitutions的数量总比literals少一个，这也意味着表达式substitutions.Iength === literals.Iength-1的结果总为true</p>
<pre><code>var a = 5;
var b = 10;

tag`Hello ${ a + b } world ${ a * b }`;
// 等同于
tag(['Hello ', ' world ', ''], 15, 50);
</code></pre>
<p>​		通过这种模式，我们可以将literals和substitutions两个数组交织在一起重组结果字符串。先取出literals中的首个元素，再取出substitution中的首个元素，然后交替继续取出每一个元素，直到字符串拼接完成。于是可以通过从两个数组中交替取值的方式模拟模板字面量的默认行为。</p>
<pre><code>function passthru(literals, ...substitutions) {
    let result = &quot;&quot;;
    // 仅使用 substitution 的元素数量来进行循环
    for (let i = 0; i &lt; substitutions.length; i++) {
        result += literals[i];
        result += substitutions[i];
    }
    // 添加最后一个字面量
    result += literals[literals.length - 1];
    return result;
}
let count = 10,
price = 0.25,
message = passthru`${count} items cost $${(count * price).toFixed(2)}.`;
console.log(message); // &quot;10 items cost $2.50.&quot;
</code></pre>
<p>​		这个示例定义了一个passthru标签，模拟模板字面量的默认行为，展示了一次转换过程。此处的小窍门是使用substitutions.length来为循环计数。</p>
<p>2、应用</p>
<p>​		“标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容</p>
<pre><code>var message =
  SaferHTML`&lt;p&gt;${sender} has sent you a message.&lt;/p&gt;`;

function SaferHTML(templateData) {
  var s = templateData[0];
  for (var i = 1; i &lt; arguments.length; i++) {
    var arg = String(arguments[i]);

    // Escape special characters in the substitution.
    s += arg.replace(/&amp;/g, &quot;&amp;amp;&quot;)
            .replace(/&lt;/g, &quot;&amp;lt;&quot;)
            .replace(/&gt;/g, &quot;&amp;gt;&quot;);

    // Don't escape special characters in the template.
    s += templateData[i];
  }
  return s;
}

</code></pre>
<p>​		上面代码中，<code>sender</code>变量往往是用户提供的，经过<code>SaferHTML</code>函数处理，里面的特殊字符都会被转义</p>
<pre><code>var sender = '&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;'; // 恶意代码
var message = SaferHTML`&lt;p&gt;${sender} has sent you a message.&lt;/p&gt;`;

console.log(message);// &lt;p&gt;&amp;lt;script&amp;gt;alert(&quot;abc&quot;)&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;
</code></pre>
<p>​		标签模板的另一个应用，就是多语言转换（国际化处理）</p>
<pre><code>i18n`Welcome to ${siteName}, you are visitor number ${visitorNumber}!`
// &quot;欢迎访问xxx，您是第xxxx位访问者！&quot;
</code></pre>
<p>​		模板字符串本身并不能取代模板引擎，因为没有条件判断和循环处理功能，但是通过标签函数，可以自己添加这些功能</p>
<pre><code>// 下面的hashTemplate函数
// 是一个自定义的模板处理函数
var libraryHtml = hashTemplate`
  &lt;ul&gt;
    for book in ${myBooks}
      &lt;li&gt;&lt;i&gt;${book.title}&lt;/i&gt; by ${book.author}&lt;/li&gt;
    end
  &lt;/ul&gt;
`;
</code></pre>
<h5 id="raw">raw();</h5>
<p>​		String.raw`方法，往往用来充当模板字面量的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字面量</p>
<pre><code>let message1 = `Multiline\nstring`,
message2 = String.raw`Multiline\nstring`;
console.log(message1); // &quot;Multiline
// string&quot;
console.log(message2); // &quot;Multiline\\nstring&quot;
</code></pre>
<pre><code>
String.raw`Hi\n${2+3}!`;
// &quot;Hi\\n5!&quot;

String.raw`Hi\u000A!`;
// 'Hi\\u000A!'

//如果原字符串的斜杠已经转义，那么String.raw不会做任何处理
String.raw`Hi\\n`    // &quot;Hi\\n&quot;
</code></pre>
<p>​		String.raw方法可以作为处理模板字面量的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p>
<p>​		String.raw方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组</p>
<pre><code>String.raw({ raw: 'test' }, 0, 1, 2);// 't0e1s2t'

// 等同于
String.raw({ raw: ['t','e','s','t'] }, 0, 1, 2);
</code></pre>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-30 23:13</span>&nbsp;
<a href="https://www.cnblogs.com/xingchenhuanqi/">北鼠</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12995579" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12995579);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 338005, cb_blogApp = 'xingchenhuanqi', cb_blogUserGuid = '4ffbd62f-fc02-e711-845c-ac853d9f53ac';
    var cb_entryId = 12995579, cb_entryCreatedDate = '2020-05-30 23:13', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 北鼠
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
