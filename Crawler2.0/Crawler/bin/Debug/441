<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="最长连续序列 题目[128]：&amp;amp;#128279;链接。 解题思路 节点本身的值作为节点的标号，两节点相邻，即允许合并(x, y)的条件为x == y&#x2B;1 。 因为数组中可能会出现值为 -1 的" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>[leetcode] 并查集（Ⅱ） - sinkinben - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=OL4qeo1LNGlN1rKIhv5UctANvt0M6Nx6kLzr_ffx3Xk" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/sinkinben/custom.css?v=pJzkKOtejOIGnmChF6yaDTAGRus=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/sinkinben/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/sinkinben/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/sinkinben/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 503262;
        var currentBlogApp = 'sinkinben';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <script>loadPageBeginHtml();</script>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/sinkinben/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/sinkinben/">sinkinben</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>

</li>
<li>


</li>
<li>
</li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
50&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
6</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/sinkinben/p/12989657.html">[leetcode] 并查集（Ⅱ）</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="最长连续序列">最长连续序列</h2>
<p>题目[128]：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/">🔗链接</a>。</p>
<p><strong>解题思路</strong></p>
<p>节点本身的值作为节点的标号，两节点相邻，即允许合并<code>(x, y)</code>的条件为<code>x == y+1</code> 。</p>
<p>因为数组中可能会出现值为 -1 的节点，因此不能把 <code>root[x] == -1</code> 作为根节点的特征，所以采取 <code>root[x] == x</code> 作为判断是否为根节点的条件。默认较小的节点作为连通分量的根。</p>
<p>此外，使用 <code>map&lt;int, int&gt; counter</code> 记录节点所在连通分量的节点个数（也是<code>merge</code> 的返回值）。</p>
<pre><code class="language-cpp">class Solution
{
public:
    unordered_map&lt;int, int&gt; counter;
    unordered_map&lt;int, int&gt; root;
    int longestConsecutive(vector&lt;int&gt; &amp;nums)
    {
        int len = nums.size();
        // use map to discard the duplicate values
        for (int x : nums)
            root[x] = x, counter[x] = 1;
        int result = len == 0 ? 0 : 1;
        for (int x : nums)
        {
            if (root.count(x + 1) == 1)
                result = max(result, merge(x, x + 1));
        }
        return result;
    }
    int find(int x)
    {
        return root[x] == x ? x : (root[x] = find(root[x]));
    }
    int merge(int x, int y)
    {
        x = find(x);
        y = find(y);
        if (x != y)
        {
            root[y] = x;
            counter[x] += counter[y];
        }
        return counter[x];
    }
};
</code></pre>
<h2 id="连通网络的操作次数">连通网络的操作次数</h2>
<p>题目[1319]：<a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/">🔗Link</a>.</p>
<p><strong>解题思路</strong></p>
<p>考虑使用并查集。</p>
<p>考虑到特殊情况，要使 N 个点连通，至少需要 N-1 条边，否则返回 -1 即可。</p>
<p>通过并查集，可以计算出多余的边的数目（多余的边是指使得图成环的边），只要 <code>findroot(x) == findroot(y)</code> 说明边 <code>(x,y)</code> 使得图成环。</p>
<p>遍历所有边，在并查集中执行合并 <code>merge</code> 操作（多余的边忽略不合并，只进行计数）。设 <code>components</code> 为合并后后 <code>root</code> 数组中 -1 的个数（也就是连通分量的个数），要想所有的连通分支都连起来，需要 <code>components - 1</code> 个边，所以要求「多余的边」的数目必须大于等于 <code>components - 1</code>。</p>
<p>一个简单的例子如下：</p>
<pre><code class="language-text">0--1         0--1                0--1
| /    =&gt;    |          =&gt;       |  | 
2  3         2  3                2  3
             components = 2
             duplicateEdge = 1
</code></pre>
<p><strong>代码实现</strong></p>
<pre><code class="language-cpp">class Solution
{
public:
    vector&lt;int&gt; root;
    int result = 0;
    int makeConnected(int n, vector&lt;vector&lt;int&gt;&gt; &amp;connections)
    {
        int E = connections.size();
        // corner cases
        if (n == 0 || n == 1)
            return 0;
        if (E &lt; n - 1)
            return -1;
        root.resize(n), root.assign(n, -1);
        // merge
        for (auto &amp;v : connections)
        {
            int a = v[0], b = v[1];
            merge(a, b);
        }
        int components = count(root.begin(), root.end(), -1);
        if (counter &gt;= (components - 1))
            return components - 1;
        // should not be here
        return -1;
    }
    int find(int x)
    {
        return root[x] == -1 ? x : (root[x] = find(root[x]));
    }
    // the number of duplicate edges
    int counter = 0;
    void merge(int x, int y)
    {
        x = find(x), y = find(y);
        if (x != y)
            root[y] = x;
        else
        {
            // there is a duplicate edge
            counter++;
        }
    }
};
</code></pre>
<h2 id="等式方程的可满足性">等式方程的可满足性</h2>
<p>题目[990]：<a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/">🔗Link</a>.</p>
<p><strong>解题思路</strong></p>
<p>考虑并查集。遍历所有的包含 <code>==</code> 的等式，显然，相等的 2 个变量就合并。对于不等式 <code>x!=y</code> ，必须满足 <code>findroot(x) != findroot(y)</code> 才不会出现逻辑上的错误。也就是说，不相等的 2 个变量必然在不同的连通分支当中。</p>
<pre><code class="language-cpp">#define getidx(x) ((x) - 'a')
class Solution
{
public:
    vector&lt;int&gt; root;
    bool equationsPossible(vector&lt;string&gt; &amp;equations)
    {
        root.resize('z' - 'a' + 1, -1);
        vector&lt;int&gt; notequal;
        int len = equations.size();
        for (int i = 0; i &lt; len; i++)
        {
            auto &amp;s = equations[i];
            if (s[1] == '!')
            {
                notequal.emplace_back(i);
                continue;
            }
            int a = getidx(s[0]), b = getidx(s[3]);
            merge(a, b);
        }
        for (int i : notequal)
        {
            auto &amp;s = equations[i];
            int a = getidx(s[0]), b = getidx(s[3]);
            if (find(a) == find(b))
                return false;
        }
        return true;
    }
    int find(int x)
    {
        return (root[x] == -1) ? x : (root[x] = find(root[x]));
    }
    void merge(int x, int y)
    {
        x = find(x), y = find(y);
        if (x != y)
            root[y] = x;
    }
};
</code></pre>
<h2 id="尽量减少恶意软件的传播-ii">尽量减少恶意软件的传播 II</h2>
<p>题目[928]：<a href="https://leetcode-cn.com/problems/minimize-malware-spread-ii/">😑这题有点难。</a></p>
<p><strong>解题思路</strong></p>
<p>参考 <a href="https://leetcode-cn.com/problems/minimize-malware-spread-ii/solution/java-dfsshuang-bai-duo-tu-xiang-xi-jie-shi-bao-zhe/">题解1</a> 和 <a href="https://leetcode-cn.com/problems/minimize-malware-spread-ii/solution/jin-liang-jian-shao-e-yi-ruan-jian-de-chuan-bo-ii-/">题解2</a> 。</p>
<p>首先，对原来的并查集结构添加一点改进，利用 <code>vector&lt;int&gt; size[N]</code> 记录某个连通分量中节点的数目，注意<strong>当且仅当 <code>x</code> 是该连通分量的根节点时，<code>size[x]</code> 才表示该连通分量的节点数目</strong>。这是因为在 <code>merge</code> 中，只对根节点的 <code>size</code> 进行了处理。</p>
<pre><code class="language-cpp">vector&lt;int&gt; root;
vector&lt;int&gt; size;
int find(int x)
{
    return root[x] == -1 ? (x) : (root[x] = find(root[x]));
}
void merge(int x, int y)
{
    x = find(x), y = find(y);
    if (x != y)
        root[y] = x, size[x] += size[y];	// pay attention here
}
// get the size of the connected component where node x is in
int getComponentSize(int x)
{
    return size[find(x)];
}
</code></pre>
<p>然后，建立一个基本图，该图是原图 <code>graph</code> 去除所有感染节点 <code>initial</code> 的结果，并把这个基本图转换为上述改进后的并查集。把这个基本图中的节点暂且称为 clean nodes 或者 non-infected nodes .</p>
<p>从直觉上来说，我们应该在 <code>initial</code> 中找到那个标号最小，感染最多 non-infected nodes 的节点，但是这样是否符合预期？</p>
<p>显然是不符合的，来看个例子，设 <code>initial nodes = [a,b,c]</code> ，并设 2 个没有被感染的连通分量为 <code>N1, N2</code> ，且这 2 个连通分量的点数满足 <code>size(N1) &gt; size(N2)</code>，原图 <code>graph</code> 结构如下：</p>
<pre><code class="language-text">a--N1--c

b--N2
</code></pre>
<p>根据题目的意思，需要找到的是使得最终感染数目 <code>M(initial)</code> 最小的节点。</p>
<p>如果我们按照上述所谓的「直觉」：“在 initial 中找到那个感染最多 non-infected nodes 的节点”，应该去除的是节点 <code>a</code> ，但是由于 <code>c</code> 的存在，<code>N1</code> 依旧会被感染，这样 <code>M(initial) = size(N1) + size(N2)</code>。（也就是说，某个连通分量相邻的感染节点多于 1 个，该连通分量最终是必然被感染的，因为我们只能去除一个感染节点。）</p>
<p>实际上，这种情况下正确答案是去除 <code>b</code> ，因为除 <code>b</code> 后：<code>M(initial) = size(N1)</code> ，该结果才是最小的。</p>
<p>所以，我们要找的是：在 initial 中找到那个感染最多 non-infected nodes 的节点 <code>ans</code>，但这些 non-infected nodes 节点只能被 <code>ans</code> 感染，不能被其他的 initial 节点感染（即只能被感染一次）。</p>
<p><strong>代码实现</strong></p>
<pre><code class="language-cpp">class Solution
{
public:
    vector&lt;int&gt; root;
    vector&lt;int&gt; size;
    int minMalwareSpread(vector&lt;vector&lt;int&gt;&gt; &amp;graph, vector&lt;int&gt; &amp;initial)
    {
        int N = graph.size();
        root.resize(N, -1);
        size.resize(N, 1);

        // use hash table to mark infected nodes
        vector&lt;bool&gt; init(N, false);
        for (int x : initial)
            init[x] = true;
        // change the non-infected graph into disjoint union set
        for (int i = 0; i &lt; N; i++)
        {
            if (init[i])
                continue;
            for (int j = 0; j &lt; i; j++)
            {
                if (init[j])
                    continue;
                if (graph[i][j] == 1)
                    merge(i, j);
            }
        }
        // table[x] = {...}
        // the set {...} means the non-infected components which initial node x will infect
        // counter[x] = k
        // k means that the non-infected component x will be infected by initial nodes for k times
        vector&lt;int&gt; counter(N, 0);
        unordered_map&lt;int, unordered_set&lt;int&gt;&gt; table;
        for (int u : initial)
        {
            unordered_set&lt;int&gt; infected;
            for (int v = 0; v &lt; graph[u].size(); v++)
            {
                if (!init[v] &amp;&amp; graph[u][v] == 1)
                    infected.insert(find(v));
            }
            table[u] = infected;
            for (int x : infected)
                counter[x]++;
        }

        // find the node we want
        int ans = N + 1, maxInfected = -1;
        for (int u : initial)
        {
            int sum = 0;
            for (int x : table[u])
                if (counter[x] == 1)	// must be infected only once
                    sum += getComponentSize(x);
            if (sum &gt; maxInfected || (sum == maxInfected &amp;&amp; u &lt; ans))
            {
                ans = u;
                maxInfected = sum;
            }
        }
        return ans;
    }

    int find(int x)
    {
        return root[x] == -1 ? (x) : (root[x] = find(root[x]));
    }

    void merge(int x, int y)
    {
        x = find(x), y = find(y);
        if (x != y)
            root[y] = x, size[x] += size[y];
    }

    int getComponentSize(int x)
    {
        return size[find(x)];
    }
};
</code></pre>
<h2 id="尽量减少恶意软件的传播">尽量减少恶意软件的传播</h2>
<p>题目[924]：<a href="https://leetcode-cn.com/problems/minimize-malware-spread/">😅做了上面那题之后简单一点。</a></p>
<p><strong>解题思路</strong></p>
<p>依然是使用上题中 <strong>尽量减少恶意软件的传播 II</strong> 改进后的并查集结构。</p>
<p>对整个原图处理，转换为并查集。然后，模拟处理。即 <span class="math inline">\(\forall x \in initial\)</span> ，使用集合 <span class="math inline">\(newSet = initial - \{x\}\)</span> 去模拟感染原图，得到最终的感染节点数 <code>t</code>，选取感染节点数 <code>t</code> 最小且标号值最小的 <span class="math inline">\(x\)</span> 作为返回结果。</p>
<p><strong>代码实现</strong></p>
<pre><code class="language-cpp">class Solution
{
public:
    vector&lt;int&gt; root, size;
    int minMalwareSpread(vector&lt;vector&lt;int&gt;&gt; &amp;graph, vector&lt;int&gt; &amp;initial)
    {
        int N = graph.size();
        root.resize(N, -1);
        size.resize(N, 1);

        for (int i = 0; i &lt; N; i++)
            for (int j = 0; j &lt; i; j++)
                if (graph[i][j] == 1)
                    merge(i, j);

        int ans = N + 1, minval = N + 1;
        // assume that discard the node x in the initial set
        // get the injected value
        for (int x : initial)
        {
            int t = getInjected(x, initial);
            if (t &lt; minval || (t == minval &amp;&amp; ans &gt; x))
            {
                minval = t;
                ans = x;
            }
        }
        return ans;
    }
    // use set initial - {x} to inject the graph
    int getInjected(int x, vector&lt;int&gt; &amp;initial)
    {
        unordered_set&lt;int&gt; s;
        for (int k : initial)
        {
            if (k == x)
                continue;
            s.insert(find(k));
        }
        int sum = 0;
        for (int t : s)
            sum += size[find(t)];
        return sum;
    }
    int find(int x)
    {
        return root[x] == -1 ? (x) : (root[x] = find(root[x]));
    }
    void merge(int x, int y)
    {
        x = find(x), y = find(y);
        if (x != y)
            root[y] = x, size[x] += size[y];
    }
};
</code></pre>
<h2 id="被围绕的区域">被围绕的区域</h2>
<p>题目[130]：<a href="https://leetcode-cn.com/problems/surrounded-regions/">🔗本题难度一般。</a></p>
<p><strong>解题思路</strong></p>
<p>本题最特殊的节点是边界上的 <code>O</code> 以及内部与边界 <code>O</code> 相邻的节点。</p>
<p>首先，通过边界的 <code>O</code> 入手，从它开始进行 <code>DFS</code> 搜索，把所有这些的特殊节点标记为 <code>Y</code> 。然后，在 <code>board</code> 中剩下的 <code>O</code> 就是普通的节点（必然是不与边界 <code>O</code> 相邻且被 <code>X</code> 所围绕的），可以把它们全部换成 <code>X</code> 。最后，把所有的 <code>Y</code> 还原为 <code>O</code> 。</p>
<p>对于搜索方法，既可以是 <code>DFS</code> 也可以是 <code>BFS</code>。</p>
<p><strong>代码实现</strong></p>
<pre><code class="language-cpp">class Solution
{
public:
    const vector&lt;vector&lt;int&gt;&gt; direction = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    int row, col;
    void solve(vector&lt;vector&lt;char&gt;&gt; &amp;board)
    {
        row = board.size();
        if (row == 0)
            return;
        col = board[0].size();
        #define func bfs
        for (int j = 0; j &lt; col; j++)
        {
            if (board[0][j] == 'O')
                func(0, j, board);
            if (board[row - 1][j] == 'O')
                func(row - 1, j, board);
        }

        for (int i = 0; i &lt; row; i++)
        {
            if (board[i][0] == 'O')
                func(i, 0, board);
            if (board[i][col - 1] == 'O')
                func(i, col - 1, board);
        }

        for (int i = 0; i &lt; row; i++)
        {
            for (int j = 0; j &lt; col; j++)
            {
                if (board[i][j] == 'O')
                    board[i][j] = 'X';
                if (board[i][j] == 'Y')
                    board[i][j] = 'O';
            }
        }
    }

    void dfs(int i, int j, vector&lt;vector&lt;char&gt;&gt; &amp;board)
    {
        board[i][j] = 'Y';
        for (auto &amp;v : direction)
        {
            int a = i + v[0], b = j + v[1];
            if (a &lt; 0 || b &lt; 0 || a &gt;= row || b &gt;= col)
                continue;
            if (board[a][b] == 'O')
                dfs(a, b, board);
        }
    }

    void bfs(int i, int j, vector&lt;vector&lt;char&gt;&gt; &amp;board)
    {
        typedef pair&lt;int, int&gt; node;
        queue&lt;node&gt; q;
        q.push(node(i, j));
        board[i][j] = 'Y';
        while (!q.empty())
        {
            node n = q.front();
            q.pop();
            for (auto &amp;v : direction)
            {
                int a = n.first + v[0], b = n.second + v[1];
                if (!(a &lt; 0 || b &lt; 0 || a &gt;= row || b &gt;= col) &amp;&amp; board[a][b] == 'O')
                    board[a][b] = 'Y', q.push(node(a, b));
            }
        }
    }
};
</code></pre>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-30 20:53</span>&nbsp;
<a href="https://www.cnblogs.com/sinkinben/">sinkinben</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12989657" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12989657);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 503262, cb_blogApp = 'sinkinben', cb_blogUserGuid = '716d4109-97dd-4522-12cb-08d6ace5948c';
    var cb_entryId = 12989657, cb_entryCreatedDate = '2020-05-30 20:53', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			


<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 sinkinben
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!-- 生成博客目录的JS代码，两级目录 -->
<script type="text/javascript">
  /*  
      这段代码按H2、H3格式生成两级菜单
      写博客按H2、H3格式写，不然生成不了
      Markdown写作按##、###两级目录写
      当然你也可以改写代码成三级菜单
  */
  var BlogDirectory = {
    /* 获取元素位置，距浏览器左边界的距离（left）和距浏览器上边界的距离（top）*/
    getElementPosition: function (ele) {
      var topPosition = 0;
      var leftPosition = 0;
      while (ele) {
        topPosition += ele.offsetTop;
        leftPosition += ele.offsetLeft;
        ele = ele.offsetParent;
      }
      return { top: topPosition, left: leftPosition };
    },
    /*获取滚动条当前位置 */
    getScrollBarPosition: function () {
      var scrollBarPosition = document.body.scrollTop || document.documentElement.scrollTop;
      return scrollBarPosition;
    },
    /* 移动滚动条，finalPos 为目的位置，internal 为移动速度 */
    moveScrollBar: function (finalpos, interval) {
      //若不支持此方法，则退出
      if (!window.scrollTo) {
        return false;
      }

      //窗体滚动时，禁用鼠标滚轮
      window.onmousewheel = function () {
        return false;
      };

      //清除计时
      if (document.body.movement) {
        clearTimeout(document.body.movement);
      }

      //获取滚动条当前位置
      var currentpos = BlogDirectory.getScrollBarPosition();

      var dist = 0;
      //到达预定位置，则解禁鼠标滚轮，并退出
      if (currentpos == finalpos) {
        window.onmousewheel = function () {
          return true;
        }
        return true;
      }
      //未到达，则计算下一步所要移动的距离
      if (currentpos < finalpos) {
        dist = Math.ceil((finalpos - currentpos) / 10);
        currentpos += dist;
      }
      if (currentpos > finalpos) {
        dist = Math.ceil((currentpos - finalpos) / 10);
        currentpos -= dist;
      }

      var scrTop = BlogDirectory.getScrollBarPosition();//获取滚动条当前位置
      window.scrollTo(0, currentpos);//移动窗口
      if (BlogDirectory.getScrollBarPosition() == scrTop)//若已到底部，则解禁鼠标滚轮，并退出
      {
        window.onmousewheel = function () {
          return true;
        }
        return true;
      }

      //进行下一步移动
      var repeat = "BlogDirectory.moveScrollBar(" + finalpos + "," + interval + ")";
      document.body.movement = setTimeout(repeat, interval);
    },

    htmlDecode: function (text) {
      var temp = document.createElement("div");
      temp.innerHTML = text;
      var output = temp.innerText || temp.textContent;
      temp = null;
      return output;
    },

    /*
    创建博客目录，id表示包含博文正文的 div 容器的 id，
    mt 和 st 分别表示主标题和次级标题的标签名称（如 H2、H3，大写或小写都可以！），
    interval 表示移动的速度
    */
    createBlogDirectory: function (id, mt, st, interval) {
      //获取博文正文div容器
      var elem = document.getElementById(id);
      if (!elem) return false;
      //获取div中所有元素结点
      var nodes = elem.getElementsByTagName("*");
      //创建博客目录的div容器
      var divSideBar = document.createElement('DIV');
      divSideBar.className = 'uprightsideBar';
      divSideBar.setAttribute('id', 'uprightsideBar');

      var divSideBarTab = document.createElement('DIV');
      divSideBarTab.setAttribute('id', 'sideBarTab');

      var p = document.createElement('p');
      divSideBarTab.appendChild(p);
      var txt = document.createTextNode('📚目录');
      p.setAttribute('id', 'catalogHeadTitle');
      p.appendChild(txt);

      var divSideBarContents = document.createElement('DIV');
      divSideBarContents.style.display = 'none';
      divSideBarContents.setAttribute('id', 'sideBarContents');

      divSideBar.appendChild(divSideBarTab);
      divSideBar.appendChild(divSideBarContents);

      //创建自定义列表
      var dlist = document.createElement("dl");
      divSideBarContents.appendChild(dlist);
      var num = 0;//统计找到的mt和st
      mt = mt.toUpperCase();//转化成大写
      st = st.toUpperCase();//转化成大写
      //遍历所有元素结点
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].nodeName == mt || nodes[i].nodeName == st) {
          //获取标题文本
          var nodetext = nodes[i].innerHTML.replace(/<\/?[^>]+>/g, "");//innerHTML里面的内容可能有HTML标签，所以用正则表达式去除HTML的标签
          // nodetext = nodetext.replace(/ /ig, "");//替换掉所有的空格
          nodetext = BlogDirectory.htmlDecode(nodetext);
          //插入锚
          nodes[i].setAttribute("id", "blogTitle" + num);
          var item;
          switch (nodes[i].nodeName) {
            case mt:    //若为主标题
              item = document.createElement("dt");
              var itemtext = document.createTextNode(nodetext);
              break;
            case st:    //若为子标题
              item = document.createElement("dd");
              var itemtext = document.createTextNode('- ' + nodetext);
              break;
          }

          //创建锚链接
          item.appendChild(itemtext);
          item.setAttribute("name", num);
          //添加鼠标点击触发函数
          item.onclick = function () {
            var pos = BlogDirectory.getElementPosition(document.getElementById("blogTitle" + this.getAttribute("name")));
            if (!BlogDirectory.moveScrollBar(pos.top, interval)) return false;
          };
          //将自定义表项加入自定义列表中
          dlist.appendChild(item);
          num++;
        }
      }

      if (num == 0) return false;
      // 如果是移动端，通过点击的方式来显示或隐藏目录
      // 如果是PC端，通过鼠标聚焦的方式来显示或隐藏
      if (isMobile()) {
        divSideBar.onclick = function () {
          var status = divSideBarContents.style.display;
          if (status == 'block') {
            document.getElementById('catalogHeadTitle').innerText = '📚目录';
            divSideBarTab.style.borderRadius = '6px';
            divSideBarContents.style.display = 'none';
          } else if (status == 'none') {
            document.getElementById('catalogHeadTitle').innerText = '❎关闭';
            divSideBarTab.style.borderRadius = '6px 0px 0px 6px';
            divSideBarContents.style.display = 'block';
          }
        }
      } else {
        /* 鼠标进入时的事件处理 */
        divSideBarTab.onmouseenter = function () {
          divSideBarContents.style.display = 'block';
        }
        /* 鼠标离开时的事件处理 */
        divSideBar.onmouseleave = function () {
          divSideBarContents.style.display = 'none';
        }
      }
      document.body.appendChild(divSideBar);
    }

  };

  // 判断浏览器函数
  function isMobile() {
    if (window.navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i)) {
      return true; // 移动端
    } else {
      return false; // PC端
    }
  }

  window.onload = function () {
    /* 页面加载完成之后生成博客目录 */
    BlogDirectory.createBlogDirectory("cnblogs_post_body", "h2", "h3", 20);
  }
</script>
    </div>
</body>
</html>
