<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>sangmado - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd.min.css?v=gS0FloTY-RBJQcN3GCAKG6fAr6HHKtDMTw60VxjN79c" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/gaochundong/custom.css?v=VLtYtOrdiLux68PDhxkBxEtpdOM=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd-mobile.min.css?v=VacchHeVg6bp3gCO8NqMH8D8fhA8iyRbb0JgoDUvn4o" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/gaochundong/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/gaochundong/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/gaochundong/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 77744;
        var currentBlogApp = 'gaochundong';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'iMetro_HD';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <!--
<a href="https://github.com/gaochundong"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png"></a>
-->
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/gaochundong/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/gaochundong/">The Pleasure Of Craftsmanship</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/gaochundong/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/sangmado">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/gaochundong/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
205&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
2051</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2020/05/30.html">2020年5月30日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/install-microk8s-on-macos-using-multipass.html">
    在 MacOS 中使用 multipass 安装 microk8s 环境
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Kubernetes 集群通过可靠和可扩展的方式对容器化应用进行托管，使得在 DevOps 思维和体系中，让运维服务、系统升级等工作变得超级简单。
Multipass 是一款可运行于 Linux、Windows 和 MacOS 的轻量级虚拟机管理器，它专为希望使用单个命令即可启动全新 Ubuntu 环境的开发人员而设计。它在 Linux 上使用 KVM、在 Windows 上使用 Hyper-V、在 MacOS 上使用 HyperKit，以便以最小的开销运行虚拟机。它还可以在 Windows 和 MacOS 上使用 VirtualBox。Multipass 将协助你获取最新镜像，并持续保持更新。
MicroK8S 是 CNCF 认证的 Kubernetes 部署环境，可在工作站或边缘设备上运行。作为一个 snap 包，它可以原生的运行所有 Kubernetes 服务，如果需要还可以打包类库和二进制文件。它的安装仅受限于你的下载速度，而删除 MicroK8S 后不会留下任何痕迹。            <a href="https://www.cnblogs.com/gaochundong/p/install-microk8s-on-macos-using-multipass.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-30 18:10
sangmado
<span class="post-view-count">阅读(64)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12993807" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2020/05/04.html">2020年5月4日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/design-patterns-for-container-based-distributed-systems.html">
    [译] Design patterns for container-based distributed systems
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在20世纪80年代末期和90年代早期，面向对象编程彻底改变了软件的开发方式，使用模块化的组件进行应用程序构建变得更为普遍。时至今日，我们看到分布式系统开发也在进行类似的变革，基于容器化软件组件构建的微服务架构正在变得越来越流行。容器，依赖其在容器化领域内创立的多重优点，已经成为分布式系统构建的基础"对象"。随着架构风格的成熟，我们也看到了设计模式的涌现，就像我们在面向对象编程时一样，出于对细粒度代码细节的封装抽象，最终揭示了在各种应用程序和算法中相通的更高级的设计模式。这篇论文描述了我们在基于容器构建的分布式系统中识别出的三种类型的设计模式：用于容器管理的单容器模式，多容器紧密协作的单节点模式，用于分布式算法的多节点模式。就像面向对象设计模式一样，这些为分布式计算而生的设计模式引入了最佳实践，简化了代码开发，并提升了使用它们的系统的可靠性。            <a href="https://www.cnblogs.com/gaochundong/p/design-patterns-for-container-based-distributed-systems.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-04 18:31
sangmado
<span class="post-view-count">阅读(43)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12827475" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2017/08/10.html">2017年8月10日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/sangmado_common_libs.html">
    Sangmado 公共基础类库
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Sangmado 涵盖了支撑 .NET/C# 项目开发的最基础的公共类库，为团队在不断的系统开发和演进中发现和积累的最公共的代码可复用单元。Sangmado 公共类库设计原则：独立性：不与任何业务框架或业务应用耦合；依赖性：最小化外部类库依赖，选择最稳定的依赖库版本；分离性：分离重用关注点，满足 Separation of Concerns；兼容性：通过 x.y.z 版本号控制兼容性；易用性：发布 nuget 包，可在任意环境使用；开源性：使用 GitHub 代码管理，PR 功能开发；            <a href="https://www.cnblogs.com/gaochundong/p/sangmado_common_libs.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2017-08-10 16:47
sangmado
<span class="post-view-count">阅读(2967)</span><text> </text>
<span class="post-comment-count">评论(12)</span><text> </text>
<span class="post-digg-count">推荐(13)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7339540" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2017/08/02.html">2017年8月2日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/redola_rpc_consul_integration.html">
    Redola.Rpc 集成 Consul 服务发现
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Redola.Rpc 是一个使用 C# 开发的 RPC 框架，代码开源在 GitHub 上。目前版本仅支持 .NET Framework 4.6 以上版本，未来待系统稳健后再考虑移植 .NET Standard 和 .NET Core。Redola.Rpc 在 0.3.2 版本中，尝试解决几个 RPC 设计问题： 我是谁？（Local Actor） 如何告诉别人我是谁？（Actor Directory） 我提供什么服务？（Service Catalog Provider） 如何告诉别人我提供什么服务？（Service Directory） 我需要的服务在哪里？（Service Discovery） 如何调用该服务？（Service Dynamic Proxy） 如何找到该服务？（Actor Directory） 如何发消息给该服务？（Remote Actor）。通过集成 Consul 服务，使得 Redola.Rpc 有能力进行服务发现和负载均衡策略的实施。            <a href="https://www.cnblogs.com/gaochundong/p/redola_rpc_consul_integration.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2017-08-02 08:23
sangmado
<span class="post-view-count">阅读(1674)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(6)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7268643" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2016/10/25.html">2016年10月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/redola_yet_another_csharp_rpc_framework.html">
    Redola.Rpc 的一个小目标
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Redola.Rpc 是一个基于 C# 的轻量级 RPC 框架，源代码托管在 GitHub 上，并且发布了 nuget.org 上的可安装软件包。Redola.Rpc 基于 Cowboy.Sockets 进行构建，使用 TCP Socket 进行服务间通信，默认使用 .NET APM TCP Socket 模式。通过 Actor 模型抽象封装 Socket 连接与交互，实现 Actor 之间的 Register、Lookup、Handshake、KeepAlive 等功能；Actor Peer 与 Actor Peer 之间通过 TCP 长连接进行通信。Actor 封装了 TCP 中关于 TcpClient 和 TcpServer 的抽象，对外不再暴露 Client 和 Server 的概念，仅以 Peer 呈现，Peer 与 Peer 之间是平等的。Actor Master 与其他 Peer 的区别仅是承担了 Register 和 Lookup 的职责。Actor Peer 间通过 Actor Master 查询到需要通信的对端 Actor Peer 的 Actor Identity            <a href="https://www.cnblogs.com/gaochundong/p/redola_yet_another_csharp_rpc_framework.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2016-10-25 18:33
sangmado
<span class="post-view-count">阅读(2586)</span><text> </text>
<span class="post-comment-count">评论(16)</span><text> </text>
<span class="post-digg-count">推荐(18)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5991097" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2016/02/06.html">2016年2月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/cowboy_websockets.html">
    Cowboy 开源 WebSocket 网络库
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：Cowboy.WebSockets 是一个基于 .NET/C# 实现的开源 WebSocket 网络库，其完整实现了 RFC 6455 (The WebSocket Protocol) 协议标准，并部分实现了 RFC 7692 (Compression Extensions for WebSocket) 协议标准。Cowboy.WebSockets 中对于 WebSocket 的 Client/Server 分别做了实现。Cowboy.WebSockets 的内部实现是基于 Cowboy.Sockets 中的 TAP 模式的 AsyncTcpSocketServer 和 AsyncTcpSocketClient 。关于 Cowboy.Sockets 可以参考文章《C#高性能TCP服务的多种实现方式》。            <a href="https://www.cnblogs.com/gaochundong/p/cowboy_websockets.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2016-02-06 06:31
sangmado
<span class="post-view-count">阅读(9172)</span><text> </text>
<span class="post-comment-count">评论(59)</span><text> </text>
<span class="post-digg-count">推荐(23)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5183267" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2016/02/05.html">2016年2月5日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/csharp_tcp_service_models.html">
    C# 高性能 TCP 服务的多种实现方式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：本篇文章的主旨是使用 .NET/C# 实现 TCP 高性能服务的不同方式，包括但不限于如下内容：APM 方式，即 Asynchronous Programming Model；TAP 方式，即 Task-based Asynchronous Pattern；SAEA 方式，即 SocketAsyncEventArgs；RIO 方式，即 Registered I/O。在 .NET/C# 中对于 Socket 的支持均是基于 Windows I/O Completion Ports 完成端口技术的封装，通过不同的 Non-Blocking 封装结构来满足不同的编程需求。以上方式均已在 Cowboy.Sockets 中有完整实现，并且 APM 和 TAP 方式已经在实际项目中应用。Cowboy.Sockets 还在不断的进化和完善中，如有任何问题请及时指正。            <a href="https://www.cnblogs.com/gaochundong/p/csharp_tcp_service_models.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2016-02-05 14:42
sangmado
<span class="post-view-count">阅读(66932)</span><text> </text>
<span class="post-comment-count">评论(104)</span><text> </text>
<span class="post-digg-count">推荐(128)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5182742" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2015/05/04.html">2015年5月4日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html">
    代码的印象派：写点好代码吧
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在各种软件质量模型的描述中，都包含着软件可维护性（Maintainability）这一属性。而越是生命周期长的软件，对其软件可维护性的要求越高。而提高软件可维护性的根本方式就是编写可阅读的代码，让其他人理解代码的时间最小化。代码生来就是为人阅读的，只是顺便在机器上执行以完成功能。在漫长的软件生命周期中，我们有很多机会去修改软件代码，比如发现了新的 Bug、增加新的功能、改进已有功能等。修改代码的第一步当然就是阅读代码，以了解当前的设计和思路。如果代码都读不懂的话，何谈修改呢？还有，大概率条件下，修复自己实现模块的 Bug 的人通常就是你自己，如果时隔几个月后自己都读不懂自己编写的代码，会是什么感受呢？所以，如何编写出易读的代码就成了问题的关键。而能否编写出易读代码，则直接取决于软件工程师自己的的编程风格和代码品味。            <a href="https://www.cnblogs.com/gaochundong/p/the_impressionism_of_code.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2015-05-04 16:22
sangmado
<span class="post-view-count">阅读(26049)</span><text> </text>
<span class="post-comment-count">评论(104)</span><text> </text>
<span class="post-digg-count">推荐(212)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=4433158" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2015/02/09.html">2015年2月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/kmeans_clustering.html">
    K-Means 聚类算法
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：K-Means 是一种基于距离的排他的聚类划分方法。K-Means 基本原理：给定划分数量 k。创建一个初始划分，从数据集中随机地选择 k 个对象，每个对象初始地代表了一个簇中心（Cluster Centroid）。对于其他对象，计算其与各个簇中心的距离，将它们划入距离最近的簇。采用迭代的重定位技术，尝试通过对象在划分间移动来改进划分。所谓重定位技术，就是当有新的对象加入簇或者已有对象离开簇的时候，重新计算簇的平均值，然后对对象进行重新分配。这个过程不断重复，直到各簇中对象不再变化为止。K-Means 算法最常见的实现方式是使用迭代式精化启发法的 Lloyd's algorithm。            <a href="https://www.cnblogs.com/gaochundong/p/kmeans_clustering.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2015-02-09 23:06
sangmado
<span class="post-view-count">阅读(16534)</span><text> </text>
<span class="post-comment-count">评论(3)</span><text> </text>
<span class="post-digg-count">推荐(6)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=4276656" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/gaochundong/archive/2015/02/06.html">2015年2月6日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/gaochundong/p/ford_fulkerson_maximum_flow_algorithm.html">
    Ford-Fulkerson 最大流算法
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：流网络（Flow Networks）指的是一个有向图 G= (V, E)，其中每条边 (u, v) ∈ E 均有一非负容量 c(u, v) ≥ 0。如果 (u, v) ∉ E 则可以规定 c(u, v) = 0。流网络中有两个特殊的顶点：源点 s （source）和汇点 t（sink）。为方便起见，假定每个顶点均处于从源点到汇点的某条路径上，就是说，对每个顶点 v ∈ E，存在一条路径 s --> v --> t。因此，图 G 为连通图，且 |E| ≥ |V| - 1。            <a href="https://www.cnblogs.com/gaochundong/p/ford_fulkerson_maximum_flow_algorithm.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2015-02-06 03:32
sangmado
<span class="post-view-count">阅读(32579)</span><text> </text>
<span class="post-comment-count">评论(7)</span><text> </text>
<span class="post-digg-count">推荐(4)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=4260502" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/gaochundong/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 sangmado
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script type="text/javascript" language="javascript"> 

$(document).ready(function () {
    var header_info_customization_timer_counter = 0;
    var header_info_customization_timer = setInterval(function ()
    {
        if (header_info_customization_timer_counter <= 3) {
            header_info_customization_timer_counter++;
        } else {
            clearInterval(header_info_customization_timer);
        }
		
		var url = location.href;
		if ((url.indexOf('www.cnblogs.com') != -1) && navigator.userAgent.match(/(iPhone|iPod|Android|ios|iPad)/i)) {
			if($("#blogTitle").length > 0) {
				$("#blogTitle").css("display", "none");
			}
			if($("#navigator").length > 0) {
				$("#navigator").css("display", "none");
			}
			if($(".blogStats").length > 0) {
				$(".blogStats").css("display", "none");
			}
			if($("#blog_post_info_block").length > 0) {
				$("#blog_post_info_block").css("display", "none");
			}
			clearInterval(header_info_customization_timer);
		} else {
			if ($(".blogStats").length > 0)
			{
				customize_stats_display();
				clearInterval(header_info_customization_timer);
			}
		}
    }, 500);
	
    var comment_customization_timer_counter = 0;
    var comment_customization_timer = setInterval(function ()
    {
        if (comment_customization_timer_counter <= 3) {
            comment_customization_timer_counter++;
        } else {
            clearInterval(comment_customization_timer);
        }
        if ($("#comment_pager_bottom").length > 0)
        {
            customize_comment_display();
            clearInterval(comment_customization_timer);
        }
    }, 500);
	
    var digg_customization_timer_counter = 0;
    var digg_customization_timer = setInterval(function ()
    {
        if (digg_customization_timer_counter <= 3) {
            digg_customization_timer_counter++;
        } else {
            clearInterval(digg_customization_timer);
        }
		
		var url = location.href;
		if ((url.indexOf('www.cnblogs.com') != -1) && navigator.userAgent.match(/(iPhone|iPod|Android|ios|iPad)/i)) {
			if($("#div_digg").length > 0) {
				$("#div_digg").css("display", "none");
			}
			clearInterval(digg_customization_timer);
		} else {		
			if($("#div_digg").length > 0)
			{
				$("#div_digg").prepend(
				  "<div id='follow_me' style='padding-bottom: 5px'>"+
					  "<a id='follow_me_dennis' onclick='follow_me();' href='javascript:void(0);' style='font-weight: bold; padding-left:5px;'>+加关注</a>" +
				  "</div>");

				$('#div_digg').append(
				  "<div id='goto_page_top' style='padding-top: 5px'>" +
					"<a onclick='javascript:goto_comment();' href='javascript:void(0);' style='font-weight: bold; padding-left: 5px;'>快速评论</a>" + 
					"&nbsp;&nbsp;" +
					"<a href='#top' style='font-weight: bold; padding-left: 5px;'>返回顶部</a>" +
				  "</div>");

				retrieve_follow_result();
				clearInterval(digg_customization_timer);
			}
		}
    }, 1000);
	
    var sidebar_post_list_customization_timer_counter = 0;
    var sidebar_post_list_customization_timer = setInterval(function ()
    {
        if (sidebar_post_list_customization_timer_counter <= 3) {
            sidebar_post_list_customization_timer_counter++;
        } else {
            clearInterval(sidebar_post_list_customization_timer);
        }
        if ($("#TopViewPostsBlock").length > 0 && $("#TopViewPostsBlock ul li").children().size() > 0)
        {
            customize_sidebar_post_list_display("#TopViewPostsBlock ul li");
            clearInterval(sidebar_post_list_customization_timer);
        }
    }, 800);
	
    //var sidebar_tag_cloud_customization_timer_counter = 0;
    //var sidebar_tag_cloud_customization_timer = setInterval(function ()
    //{
    //    if (sidebar_tag_cloud_customization_timer_counter <= 3) {
    //        sidebar_tag_cloud_customization_timer_counter++;
    //    } else {
    //        clearInterval(sidebar_post_list_customization_timer);
    //    }
    //    if ($(".catListTag").length > 0 && $(".catListTag ul li").children().size() > 0)
    //    {
    //        customize_sidebar_tag_cloud_display();
    //        clearInterval(sidebar_tag_cloud_customization_timer);
    //    }
    //}, 600);

    var sidebar_hide_customization_timer_counter = 0;
    var sidebar_hide_customization_timer = setInterval(function ()
    {
        if (sidebar_hide_customization_timer_counter <= 3) {
            sidebar_hide_customization_timer_counter++;
        } else {
            clearInterval(sidebar_hide_customization_timer);
        }
        if ($("div#main #mainContent #post_detail #topics .post").length > 0 && $("div#main #mainContent #post_detail #topics .post").children().size() > 0)
        {
            customize_sidebar_hide_display();
            clearInterval(sidebar_hide_customization_timer);
        }
    }, 100);
});

function retrieve_follow_result() {
    var retrieve_follow_result_timer_counter = 0;
    var retrieve_follow_result_timer = setInterval(function ()
    {
        if (retrieve_follow_result_timer_counter <= 3) {
            retrieve_follow_result_timer_counter++;
        } else {
            clearInterval(retrieve_follow_result_timer);
        }
		
        var follow_result_text = $('#p_b_follow').text();
        if(follow_result_text == '关注成功' || follow_result_text == '关注失败' || follow_result_text == '已关注 -取消')
        {
            $('#follow_me_dennis').text('感谢您的关注');
            clearTimeout(retrieve_follow_result_timer);
        }
        else if(follow_result_text == '+加关注')
        {
            clearTimeout(retrieve_follow_result_timer);
        }
    }, 500);
}

function follow_me() {
    cnblogs.UserManager.FollowBlogger('01e7fb75-bbe0-df11-ac81-842b2b196315');
    retrieve_follow_result();
}

function goto_comment() { 
    document.getElementById("tbCommentBody").focus(); 
}

function customize_comment_display() {
    var comment_table_part1 =
    '<div class="dennis_comment_list">' +
        '<table class="dennis_comment_table_commentator" border="0" cellspacing="0" cellpadding="0"> ' +
        '<tr>' +
            '<td class="dennis_comment" align="left" valign="top">' +
                '<table class="dennis_comment_table_inner_right" border="0" cellpadding="0" cellspacing="0"> ' +
                    '<tr><td class="dennis_comment_topleft"></td><td class="top"></td><td class="dennis_comment_topright"></td></tr> ' +
                    '<tr><td class="dennis_comment_left"></td> <td class="dennis_comment_center" align="left"><p>';

    var comment_table_part2 = '</p> </td> <td class="right"></td></tr> ' +
                    '<tr><td class="dennis_comment_bottomleft"></td><td class="dennis_comment_bottom"></td><td class="dennis_comment_bottomright"></td></tr> ' +
                '</table>' +
            '</td> ' +
            '<td class="dennis_comment_avatar" align="right" valign="top">' +
                '<img src="';
				
    var comment_table_part3 = '"/>' +
            '</td>' +
        '</tr> ' +
        '</table> ' +
    '</div>';

    $.each($(".feedbackItem"), function (i, item) {	
        var comment_item_body = $(item).find(".blog_comment_body");
        var comment_item_body_id = comment_item_body[0].id; 
        var comment_item_id = comment_item_body_id.substr(comment_item_body_id.lastIndexOf("_") + 1);
        var comment_item_commentator_avatar_url = $("#comment_" + comment_item_id + "_avatar").html();
        if(comment_item_commentator_avatar_url == null){
            var random_avatar_number = Math.floor((Math.random() * 10) + 1);
            comment_item_commentator_avatar_url = 'http://images.cnblogs.com/cnblogs_com/gaochundong/638641/o_commentator_identicons_default_avatar' + random_avatar_number +'.png';
        }
	
        $(comment_item_body).html(comment_table_part1 + $(comment_item_body).html() + comment_table_part2 + comment_item_commentator_avatar_url + comment_table_part3);
    });
    $(".louzhu").closest(".feedbackItem").find(".dennis_comment_table_commentator").removeClass("dennis_comment_table_commentator").addClass("dennis_comment_table_louzhu");
}

function customize_stats_display() {
    var stats = $(".blogStats").html().toString().replace(/[\n|\t]/g, "");
    var blogs = /随笔\s*\-\s*(\d+)/;
    var comments = /评论\s*\-\s*(\d+)/;
    var blog_count = stats.match(blogs);
    var comment_count = stats.match(comments);
    var new_stats = "<font>{ 文章 : " + blog_count[1] + ", 评论 : " + comment_count[1] + " }</font>";
    $(".blogStats").html(new_stats)
}

function customize_sidebar_tag_cloud_display() {
    $(".catListTag .catListTitle").html("标签");
    $(".catListTag").css("overflow", "hidden");
	
    $(".catListTag ul").append(
		'<li><a href="http://www.cnblogs.com/gaochundong/tag/Inversion%20of%20Control/">Inversion of Control</a>(11)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/Entity%20Framework/">Entity Framework</a>(33)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/Performance%20Tuning/">Performance Tuning</a>(15)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/TDD/">TDD</a>(60)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/WinDbg/">WinDbg</a>(40)</li>'
		+ '<li><a href="http://www.cnblogs.com/gaochundong/tag/WCF/">WCF</a>(35)</li>');
		
    $(".catListTag ul li").each(function (i, item) {
        var link = $(item).find('a').attr('href');
        var tag = $(item).find('a').text();
        var text = $(item).text();
        var count = text.match(/.*\((\d+)\).*/);
        if(count == null) {
            $(item).remove();
            return true;
        }
        var fontsize = Math.ceil((count[1] / 30) * 100 + 50) + "%";
        var lineheight = Math.ceil(Math.ceil((count[1] / 45) * 100 + 50) / 100 * 22) + "px";
        $(item)
			.html("<a href='" + link + "' target='_blank' title='" + text +"'>" + tag + "</a>")
			.css("font-size", fontsize)
			.css("line-height", lineheight);
    });

    $(".catListTag ul").each(function(){
        var $ul = $(this);
        var $items = $ul.children('li');
        $items.sort( function(a, b){
            var r = parseInt( Math.random() * 10 );
            var isOddOrEven = r % 2;
            var isPosOrNeg = r > 5 ? 1 : -1;
            return (isOddOrEven * isPosOrNeg);
        })
		.appendTo($ul);            
    }).append('<li><a href="http://www.cnblogs.com/gaochundong/tag/">更多...</a></li>');
}

function customize_sidebar_post_list_display(selectorName) {
    $(selectorName).each( function (i, item) {
        var post_link = $(item).find('a').attr('href');
        var post_title = $(item).find('a').text();

        var regex = /(.+)(\(\d+\))/;
        var groups = post_title.match(regex);
        var prefix = groups[1];
        var number = groups[2];
		
        var total_length = 31;
        var dots = " ";
        var limit = total_length - number.length;
        var prefix_length = get_length(prefix);
        // if (prefix_length > limit - dots.length) {
        //    dots = "...";
        //    prefix = cut_str(prefix, limit - dots.length);            
        // }

        $(item).html("<a href='" + post_link + "' target='_blank' title='" + post_title +"'>" + prefix + dots + number + "</a>");
    });
}

function customize_sidebar_hide_display() {
    $("div#sideBar").css("display", "none");
    $("div#main #mainContent .forFlow").css("padding-right", "0px");
}

function get_length(str) {
    var l = 0, c = -1;
    for (var i = 0; i < str.length; i++) {
        c = str.charCodeAt(i);
        if (c >= 0 && c <= 128) l += 1;
        else l += 2;
    }
    return l;
}

function cut_str(str, len) {
    var str_length = 0;  
    var str_len = 0;  
    str_cut = new String();  
    str_len = str.length;  
    for(var i = 0; i < str_len; i++)  
    {  
        a = str.charAt(i);  
        str_length++;  
        if(escape(a).length > 4)  
        {  
            //中文字符的长度经编码之后大于4  
            str_length++;  
        }  
        str_cut = str_cut.concat(a);  
        if(str_length>=len)  
        {  
            str_cut = str_cut.concat("...");  
            return str_cut;  
        }  
    }  
    //如果给定字符串小于指定长度，则返回源字符串；  
    if(str_length < len){  
        return  str;  
    } 
}

</script>
    </div>
</body>
</html>
