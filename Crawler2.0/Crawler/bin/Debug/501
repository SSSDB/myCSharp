<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>carrykai - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin.min.css?v=lp23bZd4RUCf9TGsihJRLSq5M_182P4N8YRMn1A2CWo" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/shareAndStudy/custom.css?v=sF8PWHIqESHx2JXtDURcJJ1KAYI=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/shareAndStudy/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/shareAndStudy/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/shareAndStudy/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 449469;
        var currentBlogApp = 'shareAndStudy';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <a href="https://github.com/johnsonkai"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png" alt="Fork me on GitHub"></a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/shareAndStudy/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/shareAndStudy/">carrykai</a>
</h1>
<h2>
心存远方
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/shareAndStudy/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/carrykai">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/shareAndStudy/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
30&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
12</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/05/30.html">2020年5月30日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12960758.html">
    观察者模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：观察者模式简述 观察者（Observer）模式的定义：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。 观察者模式结构与实现 实现观察者模式时要注意具体目标对象和具体观察者对            <a href="https://www.cnblogs.com/shareAndStudy/p/12960758.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-30 15:29
carrykai
<span class="post-view-count">阅读(79)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12960758" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/05/10.html">2020年5月10日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12853633.html">
    策略模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：策略模式简述 策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。策略模式属于对象的行为模式。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。最直接的例子就是我们java api使用的Comparator接口，类如我            <a href="https://www.cnblogs.com/shareAndStudy/p/12853633.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-10 13:18
carrykai
<span class="post-view-count">阅读(13)</span><text> </text>
<span class="post-comment-count">评论(2)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12853633" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/05/05.html">2020年5月5日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12832037.html">
    工厂模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：工厂模式简述 工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象，工厂模式使得对象的创建跟使用分离。根            <a href="https://www.cnblogs.com/shareAndStudy/p/12832037.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-05 20:21
carrykai
<span class="post-view-count">阅读(14)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12832037" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/05/03.html">2020年5月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12820043.html">
    代理模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：代理模式定义 为某个对象（目标对象）提供一种代理对象以控制对这个对象的访问。在某些情况下在（比如安全性问题），客户端不能直接访问某个对象（目标对象），还是通过代理对象间接访问目标对象，代理对象在客户端和目标对象之间起到中介的作用，而且可以通过代理对象对目标对象的功能进行扩展，代理对象一般对目标对象的            <a href="https://www.cnblogs.com/shareAndStudy/p/12820043.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-05-03 23:36
carrykai
<span class="post-view-count">阅读(16)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12820043" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/04/25.html">2020年4月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12774509.html">
    idea本地Maven仓库不能下载依赖jar包的解决方案
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：1.确认maven是否正正常安装，是否配置了环境变量，可以通过命令 mvn -version 看是否显示maven的版本信息。 2.检查maven的setting.xml配置文件中本地仓库位置配置是否正确（主要是仓库位置是否存在），以及镜像配置(是否指定相应的中央仓库)是否正确。 本地仓库位置配置：            <a href="https://www.cnblogs.com/shareAndStudy/p/12774509.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-25 18:55
carrykai
<span class="post-view-count">阅读(193)</span><text> </text>
<span class="post-comment-count">评论(2)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12774509" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12774306.html">
    idea创建maven项目慢的原因以及解决方案
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：问题分析;在idea中maven项目所依赖的jar包，默认是从中央仓库直接下载jar包，不管jar包是否在本地仓库存在，所以导致idea创建maven项目速度慢，那么要解决这个问题，那么将idea设置为如果jar包在本地存在就不需要从中央仓库下载，从本地拿jar包，不存在才去远程仓库下载jar包。             <a href="https://www.cnblogs.com/shareAndStudy/p/12774306.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-25 18:10
carrykai
<span class="post-view-count">阅读(32)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12774306" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/04/23.html">2020年4月23日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12764016.html">
    git diff 理解
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：git diff命令表示工作区的文件或目录内容与暂存区同一文件或目录的区别 git diff bbbb.txt 命令解释如下： diff --git a/bbbb.txt b/bbbb.txt ## 使用git形式的diff表示方式 index 6c97420..7aafc5b 100644 ##暂            <a href="https://www.cnblogs.com/shareAndStudy/p/12764016.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-23 22:15
carrykai
<span class="post-view-count">阅读(12)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12764016" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12758036.html">
    git status 命令详解
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：git status命令表示：文件，文件夹在工作区，暂存区的状态，下图就是文件，文件夹三种状态： Changes to be committed: (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage) new file: bbbb.txt Changes            <a href="https://www.cnblogs.com/shareAndStudy/p/12758036.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-23 00:56
carrykai
<span class="post-view-count">阅读(128)</span><text> </text>
<span class="post-comment-count">评论(4)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12758036" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/04/19.html">2020年4月19日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12730723.html">
    java注解
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：注解概念与注解的作用 注解定义：注解是一种元数据，是在jdk1.5以及以后的版本引入的，与类，接口，枚举在同一层次的，它可以声明在一个类，方法，属性等前面，用来对这些元素进行说明，解释。 注解的作用： 编写文档：通过代码标识的注解，来生成文档(doc文档，api文档) 代码分析：通过代码标识的注解，            <a href="https://www.cnblogs.com/shareAndStudy/p/12730723.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-19 23:11
carrykai
<span class="post-view-count">阅读(31)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12730723" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/shareAndStudy/archive/2020/04/18.html">2020年4月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/shareAndStudy/p/12728187.html">
    单例模式
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：定义 单例模式即一个 JVM 内存中只存在一个类的对象实例。 分类 饿汉式指的是jvm加载类时就创建对象实例，调用效率高，不能延迟加载，影响系统性能，线程安全。具体代码如下： /** * 饿汉式单例模式：类加载的时候就创建实例 * 优点：线程安全，类加载时就创建实例，调用效率高 * 缺点：不能延迟加            <a href="https://www.cnblogs.com/shareAndStudy/p/12728187.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-04-18 21:24
carrykai
<span class="post-view-count">阅读(20)</span><text> </text>
<span class="post-comment-count">评论(1)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12728187" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/shareAndStudy/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 carrykai
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
